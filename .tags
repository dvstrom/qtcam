!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AC1009	src/dl_codes.h	/^        AC1009, AC1012, AC1014, AC1015$/;"	e	enum:DL_Codes::version
AC1012	src/dl_codes.h	/^        AC1009, AC1012, AC1014, AC1015$/;"	e	enum:DL_Codes::version
AC1014	src/dl_codes.h	/^        AC1009, AC1012, AC1014, AC1015$/;"	e	enum:DL_Codes::version
AC1015	src/dl_codes.h	/^        AC1009, AC1012, AC1014, AC1015$/;"	e	enum:DL_Codes::version
BAUD110	qextserialbase.h	/^    BAUD110,$/;"	e	enum:BaudRateType
BAUD115200	qextserialbase.h	/^    BAUD115200,$/;"	e	enum:BaudRateType
BAUD1200	qextserialbase.h	/^    BAUD1200,$/;"	e	enum:BaudRateType
BAUD128000	qextserialbase.h	/^    BAUD128000,            \/\/WINDOWS ONLY$/;"	e	enum:BaudRateType
BAUD134	qextserialbase.h	/^    BAUD134,               \/\/POSIX ONLY$/;"	e	enum:BaudRateType
BAUD14400	qextserialbase.h	/^    BAUD14400,             \/\/WINDOWS ONLY$/;"	e	enum:BaudRateType
BAUD150	qextserialbase.h	/^    BAUD150,               \/\/POSIX ONLY$/;"	e	enum:BaudRateType
BAUD1800	qextserialbase.h	/^    BAUD1800,              \/\/POSIX ONLY$/;"	e	enum:BaudRateType
BAUD19200	qextserialbase.h	/^    BAUD19200,$/;"	e	enum:BaudRateType
BAUD200	qextserialbase.h	/^    BAUD200,               \/\/POSIX ONLY$/;"	e	enum:BaudRateType
BAUD2400	qextserialbase.h	/^    BAUD2400,$/;"	e	enum:BaudRateType
BAUD256000	qextserialbase.h	/^    BAUD256000             \/\/WINDOWS ONLY$/;"	e	enum:BaudRateType
BAUD300	qextserialbase.h	/^    BAUD300,$/;"	e	enum:BaudRateType
BAUD38400	qextserialbase.h	/^    BAUD38400,$/;"	e	enum:BaudRateType
BAUD4800	qextserialbase.h	/^    BAUD4800,$/;"	e	enum:BaudRateType
BAUD50	qextserialbase.h	/^    BAUD50,                \/\/POSIX ONLY$/;"	e	enum:BaudRateType
BAUD56000	qextserialbase.h	/^    BAUD56000,             \/\/WINDOWS ONLY$/;"	e	enum:BaudRateType
BAUD57600	qextserialbase.h	/^    BAUD57600,$/;"	e	enum:BaudRateType
BAUD600	qextserialbase.h	/^    BAUD600,$/;"	e	enum:BaudRateType
BAUD75	qextserialbase.h	/^    BAUD75,                \/\/POSIX ONLY$/;"	e	enum:BaudRateType
BAUD76800	qextserialbase.h	/^    BAUD76800,             \/\/POSIX ONLY$/;"	e	enum:BaudRateType
BAUD9600	qextserialbase.h	/^    BAUD9600,$/;"	e	enum:BaudRateType
BAUDRATE	commthread.cpp	10;"	d	file:
BaudRate	qextserialbase.h	/^    BaudRateType BaudRate;$/;"	m	struct:PortSettings
BaudRateType	qextserialbase.h	/^enum BaudRateType $/;"	g
CIRCLEREAD	circleread.cpp	/^CIRCLEREAD::CIRCLEREAD()$/;"	f	class:CIRCLEREAD
CIRCLEREAD	circleread.h	/^class CIRCLEREAD : public DL_CreationAdapter$/;"	c
CIRCLEREAD_H	circleread.h	2;"	d
COMMTHREAD_H	commthread.h	2;"	d
CONFIGDIALOG_H	configdialog.h	42;"	d
CompGreaterX	mainwindow.h	/^class CompGreaterX$/;"	c
CompGreaterY	mainwindow.h	/^class CompGreaterY$/;"	c
CompGreaterYX	mainwindow.h	/^class CompGreaterYX$/;"	c
CompLessX	mainwindow.h	/^class CompLessX$/;"	c
CompLessY	mainwindow.h	/^class CompLessY$/;"	c
CompTwoHole	mainwindow.h	/^    CompTwoHole(Hole* hole):firstItem(hole){};$/;"	f	class:CompTwoHole
CompTwoHole	mainwindow.h	/^class CompTwoHole$/;"	c
ConfigDialog	configdialog.cpp	/^ConfigDialog::ConfigDialog()$/;"	f	class:ConfigDialog
ConfigDialog	configdialog.h	/^class ConfigDialog : public QDialog$/;"	c
ConfigurationPage	pages.cpp	/^ConfigurationPage::ConfigurationPage(QWidget *parent)$/;"	f	class:ConfigurationPage
ConfigurationPage	pages.h	/^class ConfigurationPage : public QWidget$/;"	c
DATA_5	qextserialbase.h	/^    DATA_5,$/;"	e	enum:DataBitsType
DATA_6	qextserialbase.h	/^    DATA_6,$/;"	e	enum:DataBitsType
DATA_7	qextserialbase.h	/^    DATA_7,$/;"	e	enum:DataBitsType
DATA_8	qextserialbase.h	/^    DATA_8$/;"	e	enum:DataBitsType
DIGITAL_NAMES	qextserialbase.h	/^    DIGITAL_NAMES,$/;"	e	enum:NamingConvention
DL_3dFaceData	src/dl_entities.h	/^typedef DL_TraceData DL_3dFaceData;$/;"	t
DL_ANGLE_CODE	src/dl_codes.h	447;"	d
DL_ATTFLAGS_CODE	src/dl_codes.h	424;"	d
DL_ATTRIBUTES_H	src/dl_attributes.h	26;"	d
DL_ATTS_FOLLOW_CODE	src/dl_codes.h	485;"	d
DL_ATT_CONST_FLAG	src/dl_codes.h	490;"	d
DL_ATT_FLAGS_CODE	src/dl_codes.h	488;"	d
DL_ATT_INVIS_FLAG	src/dl_codes.h	489;"	d
DL_ATT_PRESET_FLAG	src/dl_codes.h	492;"	d
DL_ATT_TAG_CODE	src/dl_codes.h	486;"	d
DL_ATT_VAL_CODE	src/dl_codes.h	487;"	d
DL_ATT_VERIFY_FLAG	src/dl_codes.h	491;"	d
DL_ArcData	src/dl_entities.h	/^    DL_ArcData(double acx, double acy, double acz,$/;"	f	struct:DL_ArcData
DL_ArcData	src/dl_entities.h	/^struct DL_ArcData {$/;"	s
DL_Attributes	src/dl_attributes.h	/^    DL_Attributes() {$/;"	f	class:DL_Attributes
DL_Attributes	src/dl_attributes.h	/^    DL_Attributes(const string& layer,$/;"	f	class:DL_Attributes
DL_Attributes	src/dl_attributes.h	/^class DL_Attributes {$/;"	c
DL_BLOCK	src/dl_dxf.h	58;"	d
DL_BLOCK_BASE_CODE	src/dl_codes.h	440;"	d
DL_BLOCK_EN_CODE	src/dl_codes.h	512;"	d
DL_BLOCK_FLAGS_CODE	src/dl_codes.h	439;"	d
DL_BLOCK_NAME_CODE	src/dl_codes.h	464;"	d
DL_BULGE_CODE	src/dl_codes.h	478;"	d
DL_BlockData	src/dl_entities.h	/^    DL_BlockData(const string& bName,$/;"	f	struct:DL_BlockData
DL_BlockData	src/dl_entities.h	/^struct DL_BlockData {$/;"	s
DL_CENTER_CODE	src/dl_codes.h	452;"	d
DL_CLOSED_PLINE	src/dl_codes.h	497;"	d
DL_COLOUR_CODE	src/dl_codes.h	480;"	d
DL_COMMENT_CODE	src/dl_codes.h	432;"	d
DL_COND_OP_CODE	src/dl_codes.h	455;"	d
DL_CRD2GRP_END	src/dl_codes.h	399;"	d
DL_CRD2GRP_END	src/dl_codes.h	418;"	d
DL_CRD2GRP_START	src/dl_codes.h	398;"	d
DL_CRD2GRP_START	src/dl_codes.h	417;"	d
DL_CRDGRP_END	src/dl_codes.h	384;"	d
DL_CRDGRP_START	src/dl_codes.h	383;"	d
DL_CREATIONADAPTER_H	src/dl_creationadapter.h	26;"	d
DL_CREATIONINTERFACE_H	src/dl_creationinterface.h	26;"	d
DL_CircleData	src/dl_entities.h	/^    DL_CircleData(double acx, double acy, double acz,$/;"	f	struct:DL_CircleData
DL_CircleData	src/dl_entities.h	/^struct DL_CircleData {$/;"	s
DL_Codes	src/dl_codes.h	/^class DL_Codes {$/;"	c
DL_ControlPointData	src/dl_entities.h	/^    DL_ControlPointData(double px, double py, double pz) {$/;"	f	struct:DL_ControlPointData
DL_ControlPointData	src/dl_entities.h	/^struct DL_ControlPointData {$/;"	s
DL_CreationAdapter	src/dl_creationadapter.h	/^    DL_CreationAdapter() {}$/;"	f	class:DL_CreationAdapter
DL_CreationAdapter	src/dl_creationadapter.h	/^class DL_CreationAdapter : public DL_CreationInterface {$/;"	c
DL_CreationInterface	src/dl_creationinterface.h	/^    DL_CreationInterface() {$/;"	f	class:DL_CreationInterface
DL_CreationInterface	src/dl_creationinterface.h	/^class DL_CreationInterface {$/;"	c
DL_DCS_TRANS_CODE	src/dl_codes.h	536;"	d
DL_DXF_H	src/dl_dxf.h	26;"	d
DL_DXF_MAXGROUPCODE	src/dl_codes.h	57;"	d
DL_DXF_MAXLINE	src/dl_codes.h	56;"	d
DL_DimAlignedData	src/dl_entities.h	/^    DL_DimAlignedData(double depx1, double depy1, double depz1,$/;"	f	struct:DL_DimAlignedData
DL_DimAlignedData	src/dl_entities.h	/^struct DL_DimAlignedData {$/;"	s
DL_DimAngular3PData	src/dl_entities.h	/^    DL_DimAngular3PData(double ddpx1, double ddpy1, double ddpz1,$/;"	f	struct:DL_DimAngular3PData
DL_DimAngular3PData	src/dl_entities.h	/^struct DL_DimAngular3PData {$/;"	s
DL_DimAngularData	src/dl_entities.h	/^    DL_DimAngularData(double ddpx1, double ddpy1, double ddpz1,$/;"	f	struct:DL_DimAngularData
DL_DimAngularData	src/dl_entities.h	/^struct DL_DimAngularData {$/;"	s
DL_DimDiametricData	src/dl_entities.h	/^    DL_DimDiametricData(double ddpx, double ddpy, double ddpz, double dleader) {$/;"	f	struct:DL_DimDiametricData
DL_DimDiametricData	src/dl_entities.h	/^struct DL_DimDiametricData {$/;"	s
DL_DimLinearData	src/dl_entities.h	/^    DL_DimLinearData(double ddpx1, double ddpy1, double ddpz1,$/;"	f	struct:DL_DimLinearData
DL_DimLinearData	src/dl_entities.h	/^struct DL_DimLinearData {$/;"	s
DL_DimOrdinateData	src/dl_entities.h	/^    DL_DimOrdinateData(double ddpx1, double ddpy1, double ddpz1,$/;"	f	struct:DL_DimOrdinateData
DL_DimOrdinateData	src/dl_entities.h	/^struct DL_DimOrdinateData {$/;"	s
DL_DimRadialData	src/dl_entities.h	/^    DL_DimRadialData(double ddpx, double ddpy, double ddpz, double dleader) {$/;"	f	struct:DL_DimRadialData
DL_DimRadialData	src/dl_entities.h	/^struct DL_DimRadialData {$/;"	s
DL_DimensionData	src/dl_entities.h	/^    DL_DimensionData(double ddpx, double ddpy, double ddpz,$/;"	f	struct:DL_DimensionData
DL_DimensionData	src/dl_entities.h	/^struct DL_DimensionData {$/;"	s
DL_Dxf	src/dl_dxf.cpp	/^DL_Dxf::DL_Dxf() {$/;"	f	class:DL_Dxf
DL_Dxf	src/dl_dxf.h	/^class DL_Dxf {$/;"	c
DL_ENDBLK	src/dl_dxf.h	59;"	d
DL_ENTITIES_H	src/dl_entities.h	26;"	d
DL_ENTITY_3DFACE	src/dl_dxf.h	84;"	d
DL_ENTITY_ARC	src/dl_dxf.h	70;"	d
DL_ENTITY_ATTRIB	src/dl_dxf.h	79;"	d
DL_ENTITY_CIRCLE	src/dl_dxf.h	71;"	d
DL_ENTITY_CONTROLPOINT	src/dl_dxf.h	69;"	d
DL_ENTITY_DIMENSION	src/dl_dxf.h	76;"	d
DL_ENTITY_ELLIPSE	src/dl_dxf.h	72;"	d
DL_ENTITY_HATCH	src/dl_dxf.h	78;"	d
DL_ENTITY_IMAGE	src/dl_dxf.h	80;"	d
DL_ENTITY_IMAGEDEF	src/dl_dxf.h	81;"	d
DL_ENTITY_INSERT	src/dl_dxf.h	73;"	d
DL_ENTITY_KNOT	src/dl_dxf.h	68;"	d
DL_ENTITY_LEADER	src/dl_dxf.h	77;"	d
DL_ENTITY_LINE	src/dl_dxf.h	63;"	d
DL_ENTITY_LWPOLYLINE	src/dl_dxf.h	65;"	d
DL_ENTITY_MTEXT	src/dl_dxf.h	75;"	d
DL_ENTITY_POINT	src/dl_dxf.h	62;"	d
DL_ENTITY_POLYLINE	src/dl_dxf.h	64;"	d
DL_ENTITY_SEQEND	src/dl_dxf.h	85;"	d
DL_ENTITY_SOLID	src/dl_dxf.h	83;"	d
DL_ENTITY_SPLINE	src/dl_dxf.h	67;"	d
DL_ENTITY_TEXT	src/dl_dxf.h	74;"	d
DL_ENTITY_TRACE	src/dl_dxf.h	82;"	d
DL_ENTITY_TYPE_CODE	src/dl_codes.h	458;"	d
DL_ENTITY_VERTEX	src/dl_dxf.h	66;"	d
DL_ENT_HAND_CODE	src/dl_codes.h	466;"	d
DL_ERLGRP_END	src/dl_codes.h	407;"	d
DL_ERLGRP_START	src/dl_codes.h	406;"	d
DL_ESTRGRP_END	src/dl_codes.h	403;"	d
DL_ESTRGRP_START	src/dl_codes.h	402;"	d
DL_EXCEPTION_H	src/dl_exception.h	27;"	d
DL_EXTD_APP_NAME	src/dl_codes.h	518;"	d
DL_EXTD_CHUNK	src/dl_codes.h	521;"	d
DL_EXTD_CTL_STR	src/dl_codes.h	519;"	d
DL_EXTD_DIR	src/dl_codes.h	526;"	d
DL_EXTD_DISP	src/dl_codes.h	525;"	d
DL_EXTD_DIST	src/dl_codes.h	528;"	d
DL_EXTD_FLOAT	src/dl_codes.h	527;"	d
DL_EXTD_HANDLE	src/dl_codes.h	522;"	d
DL_EXTD_INT16	src/dl_codes.h	530;"	d
DL_EXTD_INT32	src/dl_codes.h	531;"	d
DL_EXTD_LYR_STR	src/dl_codes.h	520;"	d
DL_EXTD_POINT	src/dl_codes.h	523;"	d
DL_EXTD_POS	src/dl_codes.h	524;"	d
DL_EXTD_SCALE	src/dl_codes.h	529;"	d
DL_EXTD_SENTINEL	src/dl_codes.h	516;"	d
DL_EXTD_STR	src/dl_codes.h	517;"	d
DL_EXTRUSION_H	src/dl_extrusion.h	26;"	d
DL_E_NAME	src/dl_codes.h	513;"	d
DL_EllipseData	src/dl_entities.h	/^    DL_EllipseData(double ecx, double ecy, double ecz,$/;"	f	struct:DL_EllipseData
DL_EllipseData	src/dl_entities.h	/^struct DL_EllipseData {$/;"	s
DL_Exception	src/dl_exception.h	/^class DL_Exception {}$/;"	c
DL_Extrusion	src/dl_extrusion.h	/^    DL_Extrusion() {$/;"	f	class:DL_Extrusion
DL_Extrusion	src/dl_extrusion.h	/^    DL_Extrusion(double dx, double dy, double dz, double elevation) {$/;"	f	class:DL_Extrusion
DL_Extrusion	src/dl_extrusion.h	/^class DL_Extrusion {$/;"	c
DL_FILE_SEP_CODE	src/dl_codes.h	460;"	d
DL_FIRST_INT_CODE	src/dl_codes.h	423;"	d
DL_FIRST_REAL_CODE	src/dl_codes.h	421;"	d
DL_FIRST_XCOORD_CODE	src/dl_codes.h	469;"	d
DL_FIRST_YCOORD_CODE	src/dl_codes.h	470;"	d
DL_FIRST_ZCOORD_CODE	src/dl_codes.h	471;"	d
DL_FLD_LEN_CODE	src/dl_codes.h	427;"	d
DL_FROZEN	src/dl_codes.h	507;"	d
DL_FROZEN_BY_DEF	src/dl_codes.h	508;"	d
DL_GroupCodeExc	src/dl_exception.h	/^    DL_GroupCodeExc(int gc=0) : groupCode(gc) {}$/;"	f	class:DL_GroupCodeExc
DL_GroupCodeExc	src/dl_exception.h	/^class DL_GroupCodeExc : public DL_Exception {$/;"	c
DL_HatchData	src/dl_entities.h	/^    DL_HatchData() {}$/;"	f	struct:DL_HatchData
DL_HatchData	src/dl_entities.h	/^    DL_HatchData(int hNumLoops,$/;"	f	struct:DL_HatchData
DL_HatchData	src/dl_entities.h	/^struct DL_HatchData {$/;"	s
DL_HatchEdgeData	src/dl_entities.h	/^    DL_HatchEdgeData() {$/;"	f	struct:DL_HatchEdgeData
DL_HatchEdgeData	src/dl_entities.h	/^    DL_HatchEdgeData(double acx, double acy,$/;"	f	struct:DL_HatchEdgeData
DL_HatchEdgeData	src/dl_entities.h	/^    DL_HatchEdgeData(double lx1, double ly1,$/;"	f	struct:DL_HatchEdgeData
DL_HatchEdgeData	src/dl_entities.h	/^struct DL_HatchEdgeData {$/;"	s
DL_HatchLoopData	src/dl_entities.h	/^    DL_HatchLoopData() {}$/;"	f	struct:DL_HatchLoopData
DL_HatchLoopData	src/dl_entities.h	/^    DL_HatchLoopData(int hNumEdges) {$/;"	f	struct:DL_HatchLoopData
DL_HatchLoopData	src/dl_entities.h	/^struct DL_HatchLoopData {$/;"	s
DL_INSERT_COORD_CODE	src/dl_codes.h	415;"	d
DL_INS_POINT_CODE	src/dl_codes.h	448;"	d
DL_ImageData	src/dl_entities.h	/^    DL_ImageData(const string& iref,$/;"	f	struct:DL_ImageData
DL_ImageData	src/dl_entities.h	/^struct DL_ImageData {$/;"	s
DL_ImageDefData	src/dl_entities.h	/^    DL_ImageDefData(const string& iref,$/;"	f	struct:DL_ImageDefData
DL_ImageDefData	src/dl_entities.h	/^struct DL_ImageDefData {$/;"	s
DL_InsertData	src/dl_entities.h	/^    DL_InsertData(const string& iName,$/;"	f	struct:DL_InsertData
DL_InsertData	src/dl_entities.h	/^struct DL_InsertData {$/;"	s
DL_KnotData	src/dl_entities.h	/^    DL_KnotData() {}$/;"	f	struct:DL_KnotData
DL_KnotData	src/dl_entities.h	/^    DL_KnotData(double pk) {$/;"	f	struct:DL_KnotData
DL_KnotData	src/dl_entities.h	/^struct DL_KnotData {$/;"	s
DL_LAST_INT_CODE	src/dl_codes.h	428;"	d
DL_LAST_REAL_CODE	src/dl_codes.h	422;"	d
DL_LAYER	src/dl_dxf.h	57;"	d
DL_LAYER_FLAGS_CODE	src/dl_codes.h	426;"	d
DL_LAYER_NAME_CODE	src/dl_codes.h	468;"	d
DL_LINETYPE	src/dl_dxf.h	60;"	d
DL_LINE_END_CODE	src/dl_codes.h	436;"	d
DL_LINE_START_CODE	src/dl_codes.h	435;"	d
DL_LOCKED	src/dl_codes.h	509;"	d
DL_LTYPE_CODE	src/dl_codes.h	481;"	d
DL_L_END_CODE	src/dl_codes.h	473;"	d
DL_L_START_CODE	src/dl_codes.h	472;"	d
DL_LayerData	src/dl_entities.h	/^    DL_LayerData(const string& lName,$/;"	f	struct:DL_LayerData
DL_LayerData	src/dl_entities.h	/^struct DL_LayerData {$/;"	s
DL_LeaderData	src/dl_entities.h	/^    DL_LeaderData(int lArrowHeadFlag,$/;"	f	struct:DL_LeaderData
DL_LeaderData	src/dl_entities.h	/^struct DL_LeaderData {$/;"	s
DL_LeaderVertexData	src/dl_entities.h	/^    DL_LeaderVertexData(double px=0.0, double py=0.0, double pz=0.0) {$/;"	f	struct:DL_LeaderVertexData
DL_LeaderVertexData	src/dl_entities.h	/^struct DL_LeaderVertexData {$/;"	s
DL_LineData	src/dl_entities.h	/^    DL_LineData(double lx1, double ly1, double lz1,$/;"	f	struct:DL_LineData
DL_LineData	src/dl_entities.h	/^struct DL_LineData {$/;"	s
DL_LineTypeData	src/dl_entities.h	/^    DL_LineTypeData(const string& lName,$/;"	f	struct:DL_LineTypeData
DL_LineTypeData	src/dl_entities.h	/^struct DL_LineTypeData {$/;"	s
DL_MTextData	src/dl_entities.h	/^    DL_MTextData(double tipx, double tipy, double tipz,$/;"	f	struct:DL_MTextData
DL_MTextData	src/dl_entities.h	/^struct DL_MTextData {$/;"	s
DL_NAME2_CODE	src/dl_codes.h	449;"	d
DL_NAME_CODE	src/dl_codes.h	463;"	d
DL_NullStrExc	src/dl_exception.h	/^class DL_NullStrExc : public DL_Exception {}$/;"	c
DL_OBJECT_USED	src/dl_codes.h	510;"	d
DL_OPEN_PLINE	src/dl_codes.h	496;"	d
DL_PCS_TRANS_CODE	src/dl_codes.h	537;"	d
DL_PFACE_MESH	src/dl_codes.h	499;"	d
DL_PGON_MESH	src/dl_codes.h	500;"	d
DL_PLINE_FLAGS_CODE	src/dl_codes.h	425;"	d
DL_POINT_COORD_CODE	src/dl_codes.h	414;"	d
DL_POLYLINE3D	src/dl_codes.h	498;"	d
DL_PointData	src/dl_entities.h	/^    DL_PointData(double px=0.0, double py=0.0, double pz=0.0) {$/;"	f	struct:DL_PointData
DL_PointData	src/dl_entities.h	/^struct DL_PointData {$/;"	s
DL_PolylineData	src/dl_entities.h	/^    DL_PolylineData(int pNumber, int pMVerteces, int pNVerteces, int pFlags) {$/;"	f	struct:DL_PolylineData
DL_PolylineData	src/dl_entities.h	/^struct DL_PolylineData {$/;"	s
DL_RADIUS_CODE	src/dl_codes.h	453;"	d
DL_REFERENCED	src/dl_codes.h	443;"	d
DL_RLGRP_END	src/dl_codes.h	388;"	d
DL_RLGRP_START	src/dl_codes.h	387;"	d
DL_ROTATION_CODE	src/dl_codes.h	479;"	d
DL_SCALE_X_CODE	src/dl_codes.h	475;"	d
DL_SCALE_Y_CODE	src/dl_codes.h	476;"	d
DL_SCALE_Z_CODE	src/dl_codes.h	477;"	d
DL_SECTION_NAME_CODE	src/dl_codes.h	465;"	d
DL_SES_CODE	src/dl_codes.h	459;"	d
DL_SETTING	src/dl_dxf.h	61;"	d
DL_SHOGRP_END	src/dl_codes.h	392;"	d
DL_SHOGRP_START	src/dl_codes.h	391;"	d
DL_SOT_CODE	src/dl_codes.h	461;"	d
DL_STRGRP_END	src/dl_codes.h	380;"	d
DL_STRGRP_START	src/dl_codes.h	379;"	d
DL_SUBCLASS	src/dl_codes.h	395;"	d
DL_SolidData	src/dl_entities.h	/^typedef DL_TraceData DL_SolidData;$/;"	t
DL_SplineData	src/dl_entities.h	/^    DL_SplineData(int pDegree, int pNKnots, int pNControl, int pFlags) {$/;"	f	struct:DL_SplineData
DL_SplineData	src/dl_entities.h	/^struct DL_SplineData {$/;"	s
DL_TEXTVAL_CODE	src/dl_codes.h	462;"	d
DL_THICKNESS	src/dl_codes.h	420;"	d
DL_TXTHI_CODE	src/dl_codes.h	474;"	d
DL_TXT_STYLE_CODE	src/dl_codes.h	467;"	d
DL_TextData	src/dl_entities.h	/^    DL_TextData(double tipx, double tipy, double tipz,$/;"	f	struct:DL_TextData
DL_TextData	src/dl_entities.h	/^struct DL_TextData {$/;"	s
DL_TraceData	src/dl_entities.h	/^    DL_TraceData() {$/;"	f	struct:DL_TraceData
DL_TraceData	src/dl_entities.h	/^    DL_TraceData(double sx1, double sy1, double sz1,$/;"	f	struct:DL_TraceData
DL_TraceData	src/dl_entities.h	/^struct DL_TraceData {$/;"	s
DL_UCS_TRANS_CODE	src/dl_codes.h	535;"	d
DL_UNKNOWN	src/dl_dxf.h	56;"	d
DL_VERSION	src/dl_dxf.h	54;"	d
DL_VERSION_2000	src/dl_codes.h	372;"	d
DL_VERSION_2002	src/dl_codes.h	373;"	d
DL_VERSION_LT2	src/dl_codes.h	366;"	d
DL_VERSION_LT95	src/dl_codes.h	368;"	d
DL_VERSION_LT97	src/dl_codes.h	370;"	d
DL_VERSION_LT98	src/dl_codes.h	371;"	d
DL_VERSION_R12	src/dl_codes.h	365;"	d
DL_VERSION_R13	src/dl_codes.h	367;"	d
DL_VERSION_R14	src/dl_codes.h	369;"	d
DL_VERTEX_COORD_CODE	src/dl_codes.h	503;"	d
DL_VERTS_FOLLOW_CODE	src/dl_codes.h	502;"	d
DL_VertexData	src/dl_entities.h	/^    DL_VertexData(double px=0.0, double py=0.0, double pz=0.0,$/;"	f	struct:DL_VertexData
DL_VertexData	src/dl_entities.h	/^struct DL_VertexData {$/;"	s
DL_WCS_TRANS_CODE	src/dl_codes.h	534;"	d
DL_WRITER_ASCII_H	src/dl_writer_ascii.h	27;"	d
DL_WRITER_H	src/dl_writer.h	27;"	d
DL_Writer	src/dl_writer.h	/^    DL_Writer(DL_Codes::version version) : m_handle(0x30) {$/;"	f	class:DL_Writer
DL_Writer	src/dl_writer.h	/^class DL_Writer {$/;"	c
DL_WriterA	src/dl_writer_ascii.h	/^    DL_WriterA(const char* fname, DL_Codes::version version=DL_VERSION_2000)$/;"	f	class:DL_WriterA
DL_WriterA	src/dl_writer_ascii.h	/^class DL_WriterA : public DL_Writer {$/;"	c
DL_XREF_DEPENDENT	src/dl_codes.h	441;"	d
DL_XREF_RESOLVED	src/dl_codes.h	442;"	d
DL_XSCALE_CODE	src/dl_codes.h	445;"	d
DL_X_EXTRU_CODE	src/dl_codes.h	429;"	d
DL_Y8_COORD_CODE	src/dl_codes.h	410;"	d
DL_YSCALE_CODE	src/dl_codes.h	446;"	d
DL_Y_EXTRU_CODE	src/dl_codes.h	430;"	d
DL_Z0_COORD_CODE	src/dl_codes.h	411;"	d
DL_Z8_COORD_CODE	src/dl_codes.h	412;"	d
DL_Z_EXTRU_CODE	src/dl_codes.h	431;"	d
DXFVIEW_H	dxfview.h	2;"	d
DXF_CODES_H	src/dl_codes.h	31;"	d
DataBits	qextserialbase.h	/^    DataBitsType DataBits;$/;"	m	struct:PortSettings
DataBitsType	qextserialbase.h	/^enum DataBitsType $/;"	g
DxfView	dxfview.h	/^    explicit DxfView(QWidget *parent = 0): QGraphicsView(parent)$/;"	f	class:DxfView
DxfView	dxfview.h	/^class DxfView : public QGraphicsView$/;"	c
E_BREAK_CONDITION	qextserialbase.h	48;"	d
E_BUFFER_OVERRUN	qextserialbase.h	51;"	d
E_CAUGHT_NON_BLOCKED_SIGNAL	qextserialbase.h	45;"	d
E_FRAMING_ERROR	qextserialbase.h	49;"	d
E_INVALID_DEVICE	qextserialbase.h	47;"	d
E_INVALID_FD	qextserialbase.h	43;"	d
E_IO_ERROR	qextserialbase.h	50;"	d
E_NO_ERROR	qextserialbase.h	42;"	d
E_NO_MEMORY	qextserialbase.h	44;"	d
E_PORT_TIMEOUT	qextserialbase.h	46;"	d
E_READ_FAILED	qextserialbase.h	55;"	d
E_RECEIVE_OVERFLOW	qextserialbase.h	52;"	d
E_RECEIVE_PARITY_ERROR	qextserialbase.h	53;"	d
E_TRANSMIT_OVERFLOW	qextserialbase.h	54;"	d
E_WRITE_FAILED	qextserialbase.h	56;"	d
EventDriven	qextserialbase.h	/^			EventDriven$/;"	e	enum:QextSerialBase::QueryMode
FLOW_HARDWARE	qextserialbase.h	/^    FLOW_HARDWARE,$/;"	e	enum:FlowType
FLOW_OFF	qextserialbase.h	/^    FLOW_OFF,$/;"	e	enum:FlowType
FLOW_XONXOFF	qextserialbase.h	/^    FLOW_XONXOFF$/;"	e	enum:FlowType
FREEBSD_NAMES	qextserialbase.h	/^    FREEBSD_NAMES,$/;"	e	enum:NamingConvention
FlowControl	qextserialbase.h	/^    FlowType FlowControl;$/;"	m	struct:PortSettings
FlowType	qextserialbase.h	/^enum FlowType $/;"	g
HOLEITEM_H	holeitem.h	2;"	d
HOLE_H	hole.h	2;"	d
HPUX_NAMES	qextserialbase.h	/^    HPUX_NAMES,$/;"	e	enum:NamingConvention
Hole	hole.cpp	/^Hole::Hole(double x, double y, double radius)$/;"	f	class:Hole
Hole	hole.h	/^class Hole :public QObject,public QGraphicsItem$/;"	c
HoleItem	holeitem.cpp	/^HoleItem::HoleItem(double hx, double hy, double radius){$/;"	f	class:HoleItem
HoleItem	holeitem.h	/^class HoleItem : public QGraphicsItem$/;"	c
HoleType	itemtypes.h	/^const int HoleType = QGraphicsItem::UserType + 1;$/;"	v
IRIX_NAMES	qextserialbase.h	/^    IRIX_NAMES,$/;"	e	enum:NamingConvention
ITEMTYPES_HPP	itemtypes.h	2;"	d
LINUX_NAMES	qextserialbase.h	/^    LINUX_NAMES$/;"	e	enum:NamingConvention
LOCK_MUTEX	qextserialbase.h	15;"	d
LS_CTS	qextserialbase.h	32;"	d
LS_DCD	qextserialbase.h	34;"	d
LS_DSR	qextserialbase.h	33;"	d
LS_DTR	qextserialbase.h	37;"	d
LS_RI	qextserialbase.h	35;"	d
LS_RTS	qextserialbase.h	36;"	d
LS_SR	qextserialbase.h	39;"	d
LS_ST	qextserialbase.h	38;"	d
MAINWINDOW_H	mainwindow.h	2;"	d
MESSAGE_H	message.h	2;"	d
M_PI	src/dl_codes.h	47;"	d
M_PI	src/dl_codes.h	48;"	d
M_PI	src/dl_codes.h	53;"	d
M_PI	src/dl_dxf.h	41;"	d
M_PI	src/dl_dxf.h	42;"	d
M_PI	src/dl_dxf.h	47;"	d
MainWindow	mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent)$/;"	f	class:MainWindow
MainWindow	mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c
NamingConvention	qextserialbase.h	/^enum NamingConvention $/;"	g
PAGES_H	pages.h	42;"	d
PAR_EVEN	qextserialbase.h	/^    PAR_EVEN,$/;"	e	enum:ParityType
PAR_MARK	qextserialbase.h	/^    PAR_MARK,               \/\/WINDOWS ONLY$/;"	e	enum:ParityType
PAR_NONE	qextserialbase.h	/^    PAR_NONE,$/;"	e	enum:ParityType
PAR_ODD	qextserialbase.h	/^    PAR_ODD,$/;"	e	enum:ParityType
PAR_SPACE	qextserialbase.h	/^    PAR_SPACE$/;"	e	enum:ParityType
POLYLINE_H	polyline.h	2;"	d
Parity	qextserialbase.h	/^    ParityType Parity;$/;"	m	struct:PortSettings
ParityType	qextserialbase.h	/^enum ParityType $/;"	g
Polling	qextserialbase.h	/^			Polling,$/;"	e	enum:QextSerialBase::QueryMode
PolyLine	polyline.cpp	/^PolyLine::PolyLine(QObject *parent) :$/;"	f	class:PolyLine
PolyLine	polyline.h	/^class PolyLine : public QObject,public QGraphicsItem$/;"	c
PortSettings	qextserialbase.h	/^struct PortSettings $/;"	s
Posix_CommConfig	posix_qextserialport.h	/^	    struct termios Posix_CommConfig;$/;"	m	class:Posix_QextSerialPort	typeref:struct:Posix_QextSerialPort::termios
Posix_Copy_Timeout	posix_qextserialport.h	/^	    struct timeval Posix_Copy_Timeout;$/;"	m	class:Posix_QextSerialPort	typeref:struct:Posix_QextSerialPort::timeval
Posix_File	posix_qextserialport.h	/^	    QFile* Posix_File;$/;"	m	class:Posix_QextSerialPort
Posix_QextSerialPort	posix_qextserialport.cpp	/^Posix_QextSerialPort::Posix_QextSerialPort()$/;"	f	class:Posix_QextSerialPort
Posix_QextSerialPort	posix_qextserialport.cpp	/^Posix_QextSerialPort::Posix_QextSerialPort(const PortSettings& settings, QextSerialBase::QueryMode mode)$/;"	f	class:Posix_QextSerialPort
Posix_QextSerialPort	posix_qextserialport.cpp	/^Posix_QextSerialPort::Posix_QextSerialPort(const Posix_QextSerialPort& s)$/;"	f	class:Posix_QextSerialPort
Posix_QextSerialPort	posix_qextserialport.cpp	/^Posix_QextSerialPort::Posix_QextSerialPort(const QString & name, QextSerialBase::QueryMode mode)$/;"	f	class:Posix_QextSerialPort
Posix_QextSerialPort	posix_qextserialport.cpp	/^Posix_QextSerialPort::Posix_QextSerialPort(const QString & name, const PortSettings& settings, QextSerialBase::QueryMode mode)$/;"	f	class:Posix_QextSerialPort
Posix_QextSerialPort	posix_qextserialport.h	/^class Posix_QextSerialPort:public QextSerialBase $/;"	c
Posix_Timeout	posix_qextserialport.h	/^	    struct timeval Posix_Timeout;$/;"	m	class:Posix_QextSerialPort	typeref:struct:Posix_QextSerialPort::timeval
QextSerialBase	qextserialbase.cpp	/^QextSerialBase::QextSerialBase()$/;"	f	class:QextSerialBase
QextSerialBase	qextserialbase.cpp	/^QextSerialBase::QextSerialBase(const QString & name)$/;"	f	class:QextSerialBase
QextSerialBase	qextserialbase.h	/^class QextSerialBase : public QIODevice $/;"	c
QueryMode	qextserialbase.h	/^		enum QueryMode {$/;"	g	class:QextSerialBase
QueryPage	pages.cpp	/^QueryPage::QueryPage(QWidget *parent)$/;"	f	class:QueryPage
QueryPage	pages.h	/^class QueryPage : public QWidget$/;"	c
RS_DEVICE	commthread.cpp	11;"	d	file:
STOP_1	qextserialbase.h	/^    STOP_1,$/;"	e	enum:StopBitsType
STOP_1_5	qextserialbase.h	/^    STOP_1_5,               \/\/WINDOWS ONLY$/;"	e	enum:StopBitsType
STOP_2	qextserialbase.h	/^    STOP_2$/;"	e	enum:StopBitsType
SUN_NAMES	qextserialbase.h	/^    SUN_NAMES,$/;"	e	enum:NamingConvention
Settings	qextserialbase.h	/^	    PortSettings Settings;$/;"	m	class:QextSerialBase
SmileyItemType	itemtypes.h	/^const int SmileyItemType = QGraphicsItem::UserType + 2;$/;"	v
StopBits	qextserialbase.h	/^    StopBitsType StopBits;$/;"	m	struct:PortSettings
StopBitsType	qextserialbase.h	/^enum StopBitsType $/;"	g
TTY_PORTABILITY_WARNING	qextserialbase.h	20;"	d
TTY_PORTABILITY_WARNING	qextserialbase.h	22;"	d
TTY_WARNING	qextserialbase.h	25;"	d
TTY_WARNING	qextserialbase.h	27;"	d
TextItemType	itemtypes.h	/^const int TextItemType = QGraphicsItem::UserType + 3;$/;"	v
Timeout_Millisec	qextserialbase.h	/^    long Timeout_Millisec;$/;"	m	struct:PortSettings
Type	hole.h	/^    enum {Type = HoleType};$/;"	e	enum:Hole::__anon1
UNLOCK_MUTEX	qextserialbase.h	16;"	d
UpdatePage	pages.cpp	/^UpdatePage::UpdatePage(QWidget *parent)$/;"	f	class:UpdatePage
UpdatePage	pages.h	/^class UpdatePage : public QWidget$/;"	c
WIN_NAMES	qextserialbase.h	/^    WIN_NAMES,$/;"	e	enum:NamingConvention
_POSIX_QEXTSERIALPORT_H_	posix_qextserialport.h	2;"	d
_QEXTSERIALBASE_H_	qextserialbase.h	2;"	d
_TTY_NOWARN_PORT_	qextserialbase.h	11;"	d
_queryMode	qextserialbase.h	/^		QextSerialBase::QueryMode _queryMode;$/;"	m	class:QextSerialBase
aboutAct	mainwindow.h	/^    QAction *aboutAct;$/;"	m	class:MainWindow
aboutQtAct	mainwindow.h	/^    QAction *aboutQtAct;$/;"	m	class:MainWindow
add3dFace	src/dl_creationadapter.h	/^    virtual void add3dFace(const DL_3dFaceData&) {}$/;"	f	class:DL_CreationAdapter
add3dFace	src/dl_dxf.cpp	/^void DL_Dxf::add3dFace(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addArc	src/dl_creationadapter.h	/^    virtual void addArc(const DL_ArcData&) {}$/;"	f	class:DL_CreationAdapter
addArc	src/dl_dxf.cpp	/^void DL_Dxf::addArc(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addAttrib	src/dl_dxf.cpp	/^void DL_Dxf::addAttrib(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addBlock	src/dl_creationadapter.h	/^    virtual void addBlock(const DL_BlockData&) {}$/;"	f	class:DL_CreationAdapter
addBlock	src/dl_dxf.cpp	/^void DL_Dxf::addBlock(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addCircle	circleread.cpp	/^void CIRCLEREAD::addCircle(const DL_CircleData &data)$/;"	f	class:CIRCLEREAD
addCircle	src/dl_creationadapter.h	/^    virtual void addCircle(const DL_CircleData&) {}$/;"	f	class:DL_CreationAdapter
addCircle	src/dl_dxf.cpp	/^void DL_Dxf::addCircle(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addComment	src/dl_creationadapter.h	/^    virtual void addComment(const char* comment) {}$/;"	f	class:DL_CreationAdapter
addComment	src/dl_dxf.cpp	/^void DL_Dxf::addComment(DL_CreationInterface* creationInterface, const char* comment) {$/;"	f	class:DL_Dxf
addControlPoint	src/dl_creationadapter.h	/^    virtual void addControlPoint(const DL_ControlPointData&) {}$/;"	f	class:DL_CreationAdapter
addDimAlign	src/dl_creationadapter.h	/^    virtual void addDimAlign(const DL_DimensionData&,$/;"	f	class:DL_CreationAdapter
addDimAligned	src/dl_dxf.cpp	/^void DL_Dxf::addDimAligned(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addDimAngular	src/dl_creationadapter.h	/^    virtual void addDimAngular(const DL_DimensionData&,$/;"	f	class:DL_CreationAdapter
addDimAngular	src/dl_dxf.cpp	/^void DL_Dxf::addDimAngular(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addDimAngular3P	src/dl_creationadapter.h	/^    virtual void addDimAngular3P(const DL_DimensionData&,$/;"	f	class:DL_CreationAdapter
addDimAngular3P	src/dl_dxf.cpp	/^void DL_Dxf::addDimAngular3P(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addDimDiametric	circleread.cpp	/^void CIRCLEREAD::addDimDiametric(const DL_DimensionData& data, const DL_DimDiametricData& edata)$/;"	f	class:CIRCLEREAD
addDimDiametric	src/dl_creationadapter.h	/^    virtual void addDimDiametric(const DL_DimensionData&,$/;"	f	class:DL_CreationAdapter
addDimDiametric	src/dl_dxf.cpp	/^void DL_Dxf::addDimDiametric(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addDimLinear	src/dl_creationadapter.h	/^    virtual void addDimLinear(const DL_DimensionData&,$/;"	f	class:DL_CreationAdapter
addDimLinear	src/dl_dxf.cpp	/^void DL_Dxf::addDimLinear(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addDimOrdinate	src/dl_creationadapter.h	/^    virtual void addDimOrdinate(const DL_DimensionData&,$/;"	f	class:DL_CreationAdapter
addDimOrdinate	src/dl_dxf.cpp	/^void DL_Dxf::addDimOrdinate(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addDimRadial	src/dl_creationadapter.h	/^    virtual void addDimRadial(const DL_DimensionData&,$/;"	f	class:DL_CreationAdapter
addDimRadial	src/dl_dxf.cpp	/^void DL_Dxf::addDimRadial(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addEllipse	src/dl_creationadapter.h	/^    virtual void addEllipse(const DL_EllipseData&) {}$/;"	f	class:DL_CreationAdapter
addEllipse	src/dl_dxf.cpp	/^void DL_Dxf::addEllipse(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addHatch	src/dl_creationadapter.h	/^    virtual void addHatch(const DL_HatchData&) {}$/;"	f	class:DL_CreationAdapter
addHatch	src/dl_dxf.cpp	/^void DL_Dxf::addHatch(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addHatchEdge	src/dl_creationadapter.h	/^    virtual void addHatchEdge(const DL_HatchEdgeData&) {}$/;"	f	class:DL_CreationAdapter
addHatchLoop	src/dl_creationadapter.h	/^    virtual void addHatchLoop(const DL_HatchLoopData&) {}$/;"	f	class:DL_CreationAdapter
addImage	src/dl_creationadapter.h	/^    virtual void addImage(const DL_ImageData&) {}$/;"	f	class:DL_CreationAdapter
addImage	src/dl_dxf.cpp	/^void DL_Dxf::addImage(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addImageDef	src/dl_dxf.cpp	/^void DL_Dxf::addImageDef(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addInsert	src/dl_creationadapter.h	/^    virtual void addInsert(const DL_InsertData&) {}$/;"	f	class:DL_CreationAdapter
addInsert	src/dl_dxf.cpp	/^void DL_Dxf::addInsert(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addKnot	src/dl_creationadapter.h	/^    virtual void addKnot(const DL_KnotData&) {}$/;"	f	class:DL_CreationAdapter
addLayer	src/dl_creationadapter.h	/^    virtual void addLayer(const DL_LayerData&) {}$/;"	f	class:DL_CreationAdapter
addLayer	src/dl_dxf.cpp	/^void DL_Dxf::addLayer(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addLeader	src/dl_creationadapter.h	/^    virtual void addLeader(const DL_LeaderData&) {}$/;"	f	class:DL_CreationAdapter
addLeader	src/dl_dxf.cpp	/^void DL_Dxf::addLeader(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addLeaderVertex	src/dl_creationadapter.h	/^    virtual void addLeaderVertex(const DL_LeaderVertexData&) {}$/;"	f	class:DL_CreationAdapter
addLine	src/dl_creationadapter.h	/^    virtual void addLine(const DL_LineData&) {}$/;"	f	class:DL_CreationAdapter
addLine	src/dl_dxf.cpp	/^void DL_Dxf::addLine(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addMText	src/dl_creationadapter.h	/^    virtual void addMText(const DL_MTextData&) {}$/;"	f	class:DL_CreationAdapter
addMText	src/dl_dxf.cpp	/^void DL_Dxf::addMText(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addMTextChunk	src/dl_creationadapter.h	/^    virtual void addMTextChunk(const char*) {}$/;"	f	class:DL_CreationAdapter
addPoint	src/dl_creationadapter.h	/^    virtual void addPoint(const DL_PointData&) {}$/;"	f	class:DL_CreationAdapter
addPoint	src/dl_dxf.cpp	/^void DL_Dxf::addPoint(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addPolyline	circleread.cpp	/^void CIRCLEREAD::addPolyline(const DL_PolylineData & data)$/;"	f	class:CIRCLEREAD
addPolyline	src/dl_creationadapter.h	/^    virtual void addPolyline(const DL_PolylineData&) {}$/;"	f	class:DL_CreationAdapter
addPolyline	src/dl_dxf.cpp	/^void DL_Dxf::addPolyline(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addSetting	src/dl_dxf.cpp	/^void DL_Dxf::addSetting(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addSolid	src/dl_creationadapter.h	/^    virtual void addSolid(const DL_SolidData&) {}$/;"	f	class:DL_CreationAdapter
addSolid	src/dl_dxf.cpp	/^void DL_Dxf::addSolid(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addSpline	src/dl_creationadapter.h	/^    virtual void addSpline(const DL_SplineData&) {}$/;"	f	class:DL_CreationAdapter
addSpline	src/dl_dxf.cpp	/^void DL_Dxf::addSpline(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addText	circleread.cpp	/^void CIRCLEREAD::addText(const DL_TextData &data)$/;"	f	class:CIRCLEREAD
addText	src/dl_creationadapter.h	/^    virtual void addText(const DL_TextData&) {}$/;"	f	class:DL_CreationAdapter
addText	src/dl_dxf.cpp	/^void DL_Dxf::addText(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addTrace	src/dl_creationadapter.h	/^    virtual void addTrace(const DL_TraceData&) {}$/;"	f	class:DL_CreationAdapter
addTrace	src/dl_dxf.cpp	/^void DL_Dxf::addTrace(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
addVertex	circleread.cpp	/^void CIRCLEREAD::addVertex(const DL_VertexData &data)$/;"	f	class:CIRCLEREAD
addVertex	src/dl_creationadapter.h	/^    virtual void addVertex(const DL_VertexData&) {}$/;"	f	class:DL_CreationAdapter
addVertex	src/dl_dxf.cpp	/^void DL_Dxf::addVertex(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
angle	src/dl_entities.h	/^    double angle;$/;"	m	struct:DL_DimLinearData
angle	src/dl_entities.h	/^    double angle;$/;"	m	struct:DL_DimensionData
angle	src/dl_entities.h	/^    double angle;$/;"	m	struct:DL_HatchData
angle	src/dl_entities.h	/^    double angle;$/;"	m	struct:DL_InsertData
angle	src/dl_entities.h	/^    double angle;$/;"	m	struct:DL_MTextData
angle	src/dl_entities.h	/^    double angle;$/;"	m	struct:DL_TextData
angle1	src/dl_entities.h	/^    double angle1;$/;"	m	struct:DL_ArcData
angle1	src/dl_entities.h	/^    double angle1;$/;"	m	struct:DL_EllipseData
angle1	src/dl_entities.h	/^    double angle1;$/;"	m	struct:DL_HatchEdgeData
angle2	src/dl_entities.h	/^    double angle2;$/;"	m	struct:DL_ArcData
angle2	src/dl_entities.h	/^    double angle2;$/;"	m	struct:DL_EllipseData
angle2	src/dl_entities.h	/^    double angle2;$/;"	m	struct:DL_HatchEdgeData
apx	src/dl_entities.h	/^    double apx;$/;"	m	struct:DL_TextData
apy	src/dl_entities.h	/^    double apy;$/;"	m	struct:DL_TextData
apz	src/dl_entities.h	/^    double apz;$/;"	m	struct:DL_TextData
arrowHeadFlag	src/dl_entities.h	/^    int arrowHeadFlag;$/;"	m	struct:DL_LeaderData
atEnd	qextserialbase.cpp	/^bool QextSerialBase::atEnd() const$/;"	f	class:QextSerialBase
attachmentPoint	src/dl_entities.h	/^    int attachmentPoint;$/;"	m	struct:DL_DimensionData
attachmentPoint	src/dl_entities.h	/^    int attachmentPoint;$/;"	m	struct:DL_MTextData
attrib	src/dl_dxf.h	/^    DL_Attributes attrib;$/;"	m	class:DL_Dxf
attributes	src/dl_creationinterface.h	/^    DL_Attributes attributes;$/;"	m	class:DL_CreationInterface
autoRefreshAct	mainwindow.h	/^    QAction *autoRefreshAct;$/;"	m	class:MainWindow
backorigin	message.h	6;"	d
baudRate	qextserialbase.cpp	/^BaudRateType QextSerialBase::baudRate(void) const$/;"	f	class:QextSerialBase
black	src/dl_codes.h	/^        black = 250,$/;"	e	enum:DL_Codes::color
blue	src/dl_codes.h	/^        blue = 5,$/;"	e	enum:DL_Codes::color
boundingRect	hole.cpp	/^QRectF Hole::boundingRect() const$/;"	f	class:Hole
boundingRect	holeitem.cpp	/^QRectF HoleItem::boundingRect() const$/;"	f	class:HoleItem
bpx	src/dl_entities.h	/^    double bpx;$/;"	m	struct:DL_BlockData
bpy	src/dl_entities.h	/^    double bpy;$/;"	m	struct:DL_BlockData
bpz	src/dl_entities.h	/^    double bpz;$/;"	m	struct:DL_BlockData
brightness	src/dl_entities.h	/^	int brightness;$/;"	m	struct:DL_ImageData
brown	src/dl_codes.h	/^        brown = 15,$/;"	e	enum:DL_Codes::color
buf	commthread.h	/^    char buf[128];$/;"	m	class:commThread
bulge	src/dl_dxf.h	/^    double bulge;$/;"	m	class:DL_Dxf
bulge	src/dl_entities.h	/^    double bulge;$/;"	m	struct:DL_VertexData
byblock	src/dl_codes.h	/^        byblock = 0$/;"	e	enum:DL_Codes::color
bylayer	src/dl_codes.h	/^        bylayer = 256,$/;"	e	enum:DL_Codes::color
bytesAvailable	posix_qextserialport.cpp	/^qint64 Posix_QextSerialPort::bytesAvailable()$/;"	f	class:Posix_QextSerialPort
ccw	src/dl_entities.h	/^    bool ccw;$/;"	m	struct:DL_HatchEdgeData
changePage	configdialog.cpp	/^void ConfigDialog::changePage(QListWidgetItem *current, QListWidgetItem *previous)$/;"	f	class:ConfigDialog
checkVariable	src/dl_dxf.cpp	/^bool DL_Dxf::checkVariable(const char* var, DL_Codes::version version) {$/;"	f	class:DL_Dxf
circlelist	circleread.h	/^    QList <DL_CircleData> circlelist;$/;"	m	class:CIRCLEREAD
close	mainwindow.h	/^    QPushButton *close;$/;"	m	class:MainWindow
close	posix_qextserialport.cpp	/^void Posix_QextSerialPort::close()$/;"	f	class:Posix_QextSerialPort
close	src/dl_writer_ascii.cpp	/^void DL_WriterA::close() const {$/;"	f	class:DL_WriterA
closeThread	mainwindow.cpp	/^    void MainWindow::closeThread()$/;"	f	class:MainWindow
colSp	src/dl_entities.h	/^    double colSp;$/;"	m	struct:DL_InsertData
color	src/dl_attributes.h	/^    int color;$/;"	m	class:DL_Attributes
color	src/dl_codes.h	/^    enum color {$/;"	g	class:DL_Codes
color	src/dl_writer.h	/^    void color(int col=256) const {$/;"	f	class:DL_Writer
color24	src/dl_attributes.h	/^    int color24;$/;"	m	class:DL_Attributes
cols	src/dl_entities.h	/^    int cols;$/;"	m	struct:DL_InsertData
commThread	commthread.cpp	/^commThread::commThread()$/;"	f	class:commThread
commThread	commthread.h	/^class commThread : public QThread$/;"	c
command	message.h	/^    quint8 command;$/;"	m	class:message
commarray	message.h	/^    QByteArray commarray;$/;"	m	class:message
commdata	message.h	/^    quint32 commdata;$/;"	m	class:message
comment	src/dl_writer.h	/^    void comment(const char* text) const {$/;"	f	class:DL_Writer
configAct	mainwindow.h	/^    QAction *configAct;$/;"	m	class:MainWindow
configdialog	mainwindow.h	/^    ConfigDialog *configdialog;$/;"	m	class:MainWindow
configsetting	mainwindow.cpp	/^    void MainWindow::configsetting()$/;"	f	class:MainWindow
construct	qextserialbase.cpp	/^void QextSerialBase::construct()$/;"	f	class:QextSerialBase
contentsWidget	configdialog.h	/^    QListWidget *contentsWidget;$/;"	m	class:ConfigDialog
contrast	src/dl_entities.h	/^	int contrast;$/;"	m	struct:DL_ImageData
control	message.h	11;"	d
controlPointIndex	src/dl_dxf.h	/^    int controlPointIndex;$/;"	m	class:DL_Dxf
controlPoints	src/dl_dxf.h	/^    double* controlPoints;$/;"	m	class:DL_Dxf
coord	src/dl_writer.h	/^    void coord(int gc, double x, double y, double z=0) const {$/;"	f	class:DL_Writer
coordTriplet	src/dl_writer.h	/^    void coordTriplet(int gc, const double* value) const {$/;"	f	class:DL_Writer
count	mainwindow.h	/^    QPushButton *count;$/;"	m	class:MainWindow
countholl	mainwindow.cpp	/^    void MainWindow::countholl()$/;"	f	class:MainWindow
creatbuttons	mainwindow.cpp	/^   void MainWindow::creatbuttons()$/;"	f	class:MainWindow
creatconnect	mainwindow.cpp	/^   void MainWindow::creatconnect()$/;"	f	class:MainWindow
createActions	mainwindow.cpp	/^   void MainWindow::createActions()$/;"	f	class:MainWindow
createIcons	configdialog.cpp	/^void ConfigDialog::createIcons()$/;"	f	class:ConfigDialog
createMenus	mainwindow.cpp	/^   void MainWindow::createMenus()$/;"	f	class:MainWindow
creatsplitter	mainwindow.cpp	/^   void MainWindow::creatsplitter()$/;"	f	class:MainWindow
creatviewandscene	mainwindow.cpp	/^   void MainWindow::creatviewandscene()$/;"	f	class:MainWindow
currentEntity	src/dl_dxf.h	/^    int currentEntity;$/;"	m	class:DL_Dxf
cx	src/dl_entities.h	/^    double cx;$/;"	m	struct:DL_ArcData
cx	src/dl_entities.h	/^    double cx;$/;"	m	struct:DL_CircleData
cx	src/dl_entities.h	/^    double cx;$/;"	m	struct:DL_EllipseData
cx	src/dl_entities.h	/^    double cx;$/;"	m	struct:DL_HatchEdgeData
cy	src/dl_entities.h	/^    double cy;$/;"	m	struct:DL_ArcData
cy	src/dl_entities.h	/^    double cy;$/;"	m	struct:DL_CircleData
cy	src/dl_entities.h	/^    double cy;$/;"	m	struct:DL_EllipseData
cy	src/dl_entities.h	/^    double cy;$/;"	m	struct:DL_HatchEdgeData
cyan	src/dl_codes.h	/^        cyan = 4,$/;"	e	enum:DL_Codes::color
cz	src/dl_entities.h	/^    double cz;$/;"	m	struct:DL_ArcData
cz	src/dl_entities.h	/^    double cz;$/;"	m	struct:DL_CircleData
cz	src/dl_entities.h	/^    double cz;$/;"	m	struct:DL_EllipseData
dataBits	qextserialbase.cpp	/^DataBitsType QextSerialBase::dataBits() const$/;"	f	class:QextSerialBase
datalength	message.h	/^    quint8 datalength;$/;"	m	class:message
defined	src/dl_entities.h	/^    bool defined;$/;"	m	struct:DL_HatchEdgeData
degree	src/dl_entities.h	/^    unsigned int degree;$/;"	m	struct:DL_SplineData
direction	src/dl_extrusion.h	/^	double *direction;$/;"	m	class:DL_Extrusion
display	mainwindow.h	/^    QPushButton *display;$/;"	m	class:MainWindow
dpx	src/dl_entities.h	/^    double dpx;$/;"	m	struct:DL_DimDiametricData
dpx	src/dl_entities.h	/^    double dpx;$/;"	m	struct:DL_DimRadialData
dpx	src/dl_entities.h	/^    double dpx;$/;"	m	struct:DL_DimensionData
dpx1	src/dl_entities.h	/^    double dpx1;$/;"	m	struct:DL_DimAngular3PData
dpx1	src/dl_entities.h	/^    double dpx1;$/;"	m	struct:DL_DimAngularData
dpx1	src/dl_entities.h	/^    double dpx1;$/;"	m	struct:DL_DimLinearData
dpx1	src/dl_entities.h	/^    double dpx1;$/;"	m	struct:DL_DimOrdinateData
dpx2	src/dl_entities.h	/^    double dpx2;$/;"	m	struct:DL_DimAngular3PData
dpx2	src/dl_entities.h	/^    double dpx2;$/;"	m	struct:DL_DimAngularData
dpx2	src/dl_entities.h	/^    double dpx2;$/;"	m	struct:DL_DimLinearData
dpx2	src/dl_entities.h	/^    double dpx2;$/;"	m	struct:DL_DimOrdinateData
dpx3	src/dl_entities.h	/^    double dpx3;$/;"	m	struct:DL_DimAngular3PData
dpx3	src/dl_entities.h	/^    double dpx3;$/;"	m	struct:DL_DimAngularData
dpx4	src/dl_entities.h	/^    double dpx4;$/;"	m	struct:DL_DimAngularData
dpy	src/dl_entities.h	/^    double dpy;$/;"	m	struct:DL_DimDiametricData
dpy	src/dl_entities.h	/^    double dpy;$/;"	m	struct:DL_DimRadialData
dpy	src/dl_entities.h	/^    double dpy;$/;"	m	struct:DL_DimensionData
dpy1	src/dl_entities.h	/^    double dpy1;$/;"	m	struct:DL_DimAngular3PData
dpy1	src/dl_entities.h	/^    double dpy1;$/;"	m	struct:DL_DimAngularData
dpy1	src/dl_entities.h	/^    double dpy1;$/;"	m	struct:DL_DimLinearData
dpy1	src/dl_entities.h	/^    double dpy1;$/;"	m	struct:DL_DimOrdinateData
dpy2	src/dl_entities.h	/^    double dpy2;$/;"	m	struct:DL_DimAngular3PData
dpy2	src/dl_entities.h	/^    double dpy2;$/;"	m	struct:DL_DimAngularData
dpy2	src/dl_entities.h	/^    double dpy2;$/;"	m	struct:DL_DimLinearData
dpy2	src/dl_entities.h	/^    double dpy2;$/;"	m	struct:DL_DimOrdinateData
dpy3	src/dl_entities.h	/^    double dpy3;$/;"	m	struct:DL_DimAngular3PData
dpy3	src/dl_entities.h	/^    double dpy3;$/;"	m	struct:DL_DimAngularData
dpy4	src/dl_entities.h	/^    double dpy4;$/;"	m	struct:DL_DimAngularData
dpz	src/dl_entities.h	/^    double dpz;$/;"	m	struct:DL_DimDiametricData
dpz	src/dl_entities.h	/^    double dpz;$/;"	m	struct:DL_DimRadialData
dpz	src/dl_entities.h	/^    double dpz;$/;"	m	struct:DL_DimensionData
dpz1	src/dl_entities.h	/^    double dpz1;$/;"	m	struct:DL_DimAngular3PData
dpz1	src/dl_entities.h	/^    double dpz1;$/;"	m	struct:DL_DimAngularData
dpz1	src/dl_entities.h	/^    double dpz1;$/;"	m	struct:DL_DimLinearData
dpz1	src/dl_entities.h	/^    double dpz1;$/;"	m	struct:DL_DimOrdinateData
dpz2	src/dl_entities.h	/^    double dpz2;$/;"	m	struct:DL_DimAngular3PData
dpz2	src/dl_entities.h	/^    double dpz2;$/;"	m	struct:DL_DimAngularData
dpz2	src/dl_entities.h	/^    double dpz2;$/;"	m	struct:DL_DimLinearData
dpz2	src/dl_entities.h	/^    double dpz2;$/;"	m	struct:DL_DimOrdinateData
dpz3	src/dl_entities.h	/^    double dpz3;$/;"	m	struct:DL_DimAngular3PData
dpz3	src/dl_entities.h	/^    double dpz3;$/;"	m	struct:DL_DimAngularData
dpz4	src/dl_entities.h	/^    double dpz4;$/;"	m	struct:DL_DimAngularData
drawingDirection	src/dl_entities.h	/^    int drawingDirection;$/;"	m	struct:DL_MTextData
dropEdges	src/dl_dxf.h	/^    bool dropEdges;$/;"	m	class:DL_Dxf
dxfColors	src/dl_codes.h	/^const double dxfColors[][3] = {$/;"	v
dxfEOF	src/dl_writer.h	/^    void dxfEOF() const {$/;"	f	class:DL_Writer
dxfHex	src/dl_writer_ascii.cpp	/^void DL_WriterA::dxfHex(int gc, int value) const {$/;"	f	class:DL_WriterA
dxfInt	src/dl_writer_ascii.cpp	/^void DL_WriterA::dxfInt(int gc, int value) const {$/;"	f	class:DL_WriterA
dxfReal	src/dl_writer_ascii.cpp	/^void DL_WriterA::dxfReal(int gc, double value) const {$/;"	f	class:DL_WriterA
dxfString	src/dl_writer_ascii.cpp	/^void DL_WriterA::dxfString(int gc, const char* value) const {$/;"	f	class:DL_WriterA
dxfString	src/dl_writer_ascii.cpp	/^void DL_WriterA::dxfString(int gc, const string& value) const {$/;"	f	class:DL_WriterA
dxfscene	mainwindow.h	/^    QGraphicsScene *dxfscene;$/;"	m	class:MainWindow
dxfview	mainwindow.h	/^    DxfView *dxfview;$/;"	m	class:MainWindow
elevation	src/dl_extrusion.h	/^	double elevation;$/;"	m	class:DL_Extrusion
endBlock	src/dl_creationadapter.h	/^    virtual void endBlock() {}$/;"	f	class:DL_CreationAdapter
endBlock	src/dl_dxf.cpp	/^void DL_Dxf::endBlock(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
endEntity	src/dl_creationadapter.h	/^    virtual void endEntity() {}$/;"	f	class:DL_CreationAdapter
endEntity	src/dl_dxf.cpp	/^void DL_Dxf::endEntity(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
endSequence	src/dl_creationadapter.h	/^    virtual void endSequence() {}$/;"	f	class:DL_CreationAdapter
endSequence	src/dl_dxf.cpp	/^void DL_Dxf::endSequence(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
entity	src/dl_writer.h	/^    void entity(const char* entTypeName) const {$/;"	f	class:DL_Writer
entityAttributes	src/dl_writer.h	/^    void entityAttributes(const DL_Attributes& attrib) const {$/;"	f	class:DL_Writer
epx1	src/dl_entities.h	/^    double epx1;$/;"	m	struct:DL_DimAlignedData
epx2	src/dl_entities.h	/^    double epx2;$/;"	m	struct:DL_DimAlignedData
epy1	src/dl_entities.h	/^    double epy1;$/;"	m	struct:DL_DimAlignedData
epy2	src/dl_entities.h	/^    double epy2;$/;"	m	struct:DL_DimAlignedData
epz1	src/dl_entities.h	/^    double epz1;$/;"	m	struct:DL_DimAlignedData
epz2	src/dl_entities.h	/^    double epz2;$/;"	m	struct:DL_DimAlignedData
eventFilter	mainwindow.cpp	/^    bool MainWindow::eventFilter(QObject *target, QEvent *event)$/;"	f	class:MainWindow
exitAct	mainwindow.h	/^    QAction *exitAct;$/;"	m	class:MainWindow
extrusion	src/dl_creationinterface.h	/^    DL_Extrusion *extrusion;$/;"	m	class:DL_CreationInterface
fade	src/dl_entities.h	/^	int fade;$/;"	m	struct:DL_ImageData
fallbacksAct	mainwindow.h	/^    QAction *fallbacksAct;$/;"	m	class:MainWindow
file	src/dl_entities.h	/^	string file;$/;"	m	struct:DL_ImageDefData
fileMenu	mainwindow.h	/^    QMenu *fileMenu;$/;"	m	class:MainWindow
finish	mainwindow.h	/^    QPushButton *finish;$/;"	m	class:MainWindow
firstCall	src/dl_dxf.h	/^    bool firstCall;$/;"	m	class:DL_Dxf
firstItem	mainwindow.h	/^    Hole* firstItem;$/;"	m	class:CompTwoHole
flags	src/dl_entities.h	/^    int flags;$/;"	m	struct:DL_BlockData
flags	src/dl_entities.h	/^    int flags;$/;"	m	struct:DL_LayerData
flags	src/dl_entities.h	/^    int flags;$/;"	m	struct:DL_LineTypeData
flags	src/dl_entities.h	/^    int flags;$/;"	m	struct:DL_PolylineData
flags	src/dl_entities.h	/^    int flags;$/;"	m	struct:DL_SplineData
flowControl	qextserialbase.cpp	/^FlowType QextSerialBase::flowControl() const$/;"	f	class:QextSerialBase
flush	posix_qextserialport.cpp	/^void Posix_QextSerialPort::flush()$/;"	f	class:Posix_QextSerialPort
generategcode	mainwindow.cpp	/^  void MainWindow::generategcode()$/;"	f	class:MainWindow
generatemessage	mainwindow.cpp	/^    message MainWindow::generatemessage(Hole* hole1, Hole* hole2)$/;"	f	class:MainWindow
getAttributes	src/dl_creationinterface.h	/^    DL_Attributes getAttributes() {$/;"	f	class:DL_CreationInterface
getChoppedLine	src/dl_dxf.cpp	/^bool DL_Dxf::getChoppedLine(char *s, unsigned int size, FILE *fp) {$/;"	f	class:DL_Dxf
getChoppedLine	src/dl_dxf.cpp	/^bool DL_Dxf::getChoppedLine(char *s, unsigned int size,$/;"	f	class:DL_Dxf
getColor	src/dl_attributes.h	/^    int getColor() const {$/;"	f	class:DL_Attributes
getColor24	src/dl_attributes.h	/^    int getColor24() const {$/;"	f	class:DL_Attributes
getDimData	src/dl_dxf.cpp	/^DL_DimensionData DL_Dxf::getDimData() {$/;"	f	class:DL_Dxf
getDirection	src/dl_extrusion.h	/^    double* getDirection() const {$/;"	f	class:DL_Extrusion
getDirection	src/dl_extrusion.h	/^    void getDirection(double dir[]) const {$/;"	f	class:DL_Extrusion
getElevation	src/dl_extrusion.h	/^    double getElevation() const {$/;"	f	class:DL_Extrusion
getExtrusion	src/dl_creationinterface.h	/^    DL_Extrusion* getExtrusion() {$/;"	f	class:DL_CreationInterface
getLayer	src/dl_attributes.h	/^    string getLayer() const {$/;"	f	class:DL_Attributes
getLibVersion	src/dl_dxf.cpp	/^int DL_Dxf::getLibVersion(const char* str) {$/;"	f	class:DL_Dxf
getLineType	src/dl_attributes.h	/^    string getLineType() const {$/;"	f	class:DL_Attributes
getModelSpaceHandle	src/dl_writer.h	/^    unsigned long getModelSpaceHandle() {$/;"	f	class:DL_Writer
getNextHandle	src/dl_writer.h	/^    unsigned long getNextHandle() const {$/;"	f	class:DL_Writer
getPaperSpace0Handle	src/dl_writer.h	/^    unsigned long getPaperSpace0Handle() {$/;"	f	class:DL_Writer
getPaperSpaceHandle	src/dl_writer.h	/^    unsigned long getPaperSpaceHandle() {$/;"	f	class:DL_Writer
getVersion	src/dl_dxf.h	/^	DL_Codes::version getVersion() {$/;"	f	class:DL_Dxf
getWidth	src/dl_attributes.h	/^    int getWidth() const {$/;"	f	class:DL_Attributes
gethradius	hole.cpp	/^double Hole::gethradius()$/;"	f	class:Hole
gethx	hole.cpp	/^double Hole::gethx()$/;"	f	class:Hole
gethx	holeitem.cpp	/^double HoleItem::gethx()$/;"	f	class:HoleItem
gethy	hole.cpp	/^double Hole::gethy()$/;"	f	class:Hole
gethy	holeitem.cpp	/^double HoleItem::gethy()$/;"	f	class:HoleItem
getradius	holeitem.cpp	/^double HoleItem::getradius()$/;"	f	class:HoleItem
gotoline	mainwindow.cpp	/^    void MainWindow::gotoline(int line)$/;"	f	class:MainWindow
gray	src/dl_codes.h	/^        gray = 8,$/;"	e	enum:DL_Codes::color
green	src/dl_codes.h	/^        green = 3,$/;"	e	enum:DL_Codes::color
groupCode	src/dl_dxf.h	/^    unsigned int groupCode;$/;"	m	class:DL_Dxf
groupCode	src/dl_exception.h	/^    int groupCode;$/;"	m	class:DL_GroupCodeExc
groupCodeTmp	src/dl_dxf.h	/^    char groupCodeTmp[DL_DXF_MAXLINE+1];$/;"	m	class:DL_Dxf
groupValue	src/dl_dxf.h	/^    char groupValue[DL_DXF_MAXLINE+1];$/;"	m	class:DL_Dxf
hJustification	src/dl_entities.h	/^    int hJustification;$/;"	m	struct:DL_TextData
handle	src/dl_writer.h	/^    unsigned long handle(int gc=5) const {$/;"	f	class:DL_Writer
handleHatchData	src/dl_dxf.cpp	/^bool DL_Dxf::handleHatchData(DL_CreationInterface* \/*creationInterface*\/) {$/;"	f	class:DL_Dxf
handleLWPolylineData	src/dl_dxf.cpp	/^bool DL_Dxf::handleLWPolylineData(DL_CreationInterface* \/*creationInterface*\/) {$/;"	f	class:DL_Dxf
handleLeaderData	src/dl_dxf.cpp	/^bool DL_Dxf::handleLeaderData(DL_CreationInterface* \/*creationInterface*\/) {$/;"	f	class:DL_Dxf
handleMTextData	src/dl_dxf.cpp	/^bool DL_Dxf::handleMTextData(DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
handleSplineData	src/dl_dxf.cpp	/^bool DL_Dxf::handleSplineData(DL_CreationInterface* \/*creationInterface*\/) {$/;"	f	class:DL_Dxf
hatchEdgeIndex	src/dl_dxf.h	/^    int* hatchEdgeIndex;$/;"	m	class:DL_Dxf
hatchEdges	src/dl_dxf.h	/^    DL_HatchEdgeData** hatchEdges;$/;"	m	class:DL_Dxf
hatchLoopIndex	src/dl_dxf.h	/^    int hatchLoopIndex;$/;"	m	class:DL_Dxf
hatchLoops	src/dl_dxf.h	/^    DL_HatchLoopData* hatchLoops;$/;"	m	class:DL_Dxf
hcolor	hole.h	/^    QColor  hcolor;$/;"	m	class:Hole
hcomm	mainwindow.h	/^    Posix_QextSerialPort *hcomm;$/;"	m	class:MainWindow
height	src/dl_entities.h	/^	int height;$/;"	m	struct:DL_ImageData
height	src/dl_entities.h	/^    double height;$/;"	m	struct:DL_MTextData
height	src/dl_entities.h	/^    double height;$/;"	m	struct:DL_TextData
helpMenu	mainwindow.h	/^    QMenu *helpMenu;$/;"	m	class:MainWindow
highlightCurrentLine	mainwindow.cpp	/^    void MainWindow::highlightCurrentLine()$/;"	f	class:MainWindow
holeVec	mainwindow.h	/^    QVector<Hole*> holeVec;$/;"	m	class:MainWindow
hooklineDirectionFlag	src/dl_entities.h	/^    int hooklineDirectionFlag;$/;"	m	struct:DL_LeaderData
hooklineFlag	src/dl_entities.h	/^    int hooklineFlag;$/;"	m	struct:DL_LeaderData
hradius	hole.h	/^    double hradius;$/;"	m	class:Hole
hx	hole.h	/^    double hx;$/;"	m	class:Hole
hx	holeitem.h	/^    double hx;$/;"	m	class:HoleItem
hy	hole.h	/^    double hy;$/;"	m	class:Hole
hy	holeitem.h	/^    double hy;$/;"	m	class:HoleItem
in	src/dl_dxf.cpp	/^bool DL_Dxf::in(const string& file, DL_CreationInterface* creationInterface) {$/;"	f	class:DL_Dxf
in	src/dl_dxf.cpp	/^bool DL_Dxf::in(std::stringstream& stream,$/;"	f	class:DL_Dxf
incHandle	src/dl_writer.h	/^    unsigned long incHandle() const {$/;"	f	class:DL_Writer
init	posix_qextserialport.cpp	/^void Posix_QextSerialPort::init()$/;"	f	class:Posix_QextSerialPort
ipx	src/dl_entities.h	/^    double ipx;$/;"	m	struct:DL_ImageData
ipx	src/dl_entities.h	/^    double ipx;$/;"	m	struct:DL_InsertData
ipx	src/dl_entities.h	/^    double ipx;$/;"	m	struct:DL_MTextData
ipx	src/dl_entities.h	/^    double ipx;$/;"	m	struct:DL_TextData
ipy	src/dl_entities.h	/^    double ipy;$/;"	m	struct:DL_ImageData
ipy	src/dl_entities.h	/^    double ipy;$/;"	m	struct:DL_InsertData
ipy	src/dl_entities.h	/^    double ipy;$/;"	m	struct:DL_MTextData
ipy	src/dl_entities.h	/^    double ipy;$/;"	m	struct:DL_TextData
ipz	src/dl_entities.h	/^    double ipz;$/;"	m	struct:DL_ImageData
ipz	src/dl_entities.h	/^    double ipz;$/;"	m	struct:DL_InsertData
ipz	src/dl_entities.h	/^    double ipz;$/;"	m	struct:DL_MTextData
ipz	src/dl_entities.h	/^    double ipz;$/;"	m	struct:DL_TextData
isSequential	qextserialbase.cpp	/^bool QextSerialBase::isSequential() const$/;"	f	class:QextSerialBase
k	src/dl_entities.h	/^    double k;$/;"	m	struct:DL_KnotData
knotIndex	src/dl_dxf.h	/^    int knotIndex;$/;"	m	class:DL_Dxf
knots	src/dl_dxf.h	/^    double* knots;$/;"	m	class:DL_Dxf
l_blue	src/dl_codes.h	/^        l_blue = 163,$/;"	e	enum:DL_Codes::color
l_cyan	src/dl_codes.h	/^        l_cyan = 131,$/;"	e	enum:DL_Codes::color
l_gray	src/dl_codes.h	/^        l_gray = 252,$/;"	e	enum:DL_Codes::color
l_green	src/dl_codes.h	/^        l_green = 121,$/;"	e	enum:DL_Codes::color
l_magenta	src/dl_codes.h	/^        l_magenta = 221,$/;"	e	enum:DL_Codes::color
l_red	src/dl_codes.h	/^        l_red = 23,$/;"	e	enum:DL_Codes::color
lastErr	qextserialbase.h	/^	    ulong lastErr;$/;"	m	class:QextSerialBase
lastError	qextserialbase.cpp	/^ulong QextSerialBase::lastError() const$/;"	f	class:QextSerialBase
layer	src/dl_attributes.h	/^    string layer;$/;"	m	class:DL_Attributes
leader	src/dl_entities.h	/^    double leader;$/;"	m	struct:DL_DimDiametricData
leader	src/dl_entities.h	/^    double leader;$/;"	m	struct:DL_DimRadialData
leaderCreationFlag	src/dl_entities.h	/^    int leaderCreationFlag;$/;"	m	struct:DL_LeaderData
leaderPathType	src/dl_entities.h	/^    int leaderPathType;$/;"	m	struct:DL_LeaderData
leaderVertexIndex	src/dl_dxf.h	/^    int leaderVertexIndex;$/;"	m	class:DL_Dxf
leaderVertices	src/dl_dxf.h	/^    double* leaderVertices;$/;"	m	class:DL_Dxf
libVersion	src/dl_dxf.h	/^	int libVersion;$/;"	m	class:DL_Dxf
lineSpacingFactor	src/dl_entities.h	/^    double lineSpacingFactor;$/;"	m	struct:DL_DimensionData
lineSpacingFactor	src/dl_entities.h	/^    double lineSpacingFactor;$/;"	m	struct:DL_MTextData
lineSpacingStyle	src/dl_entities.h	/^    int lineSpacingStyle;$/;"	m	struct:DL_DimensionData
lineSpacingStyle	src/dl_entities.h	/^    int lineSpacingStyle;$/;"	m	struct:DL_MTextData
lineStatus	posix_qextserialport.cpp	/^unsigned long Posix_QextSerialPort::lineStatus()$/;"	f	class:Posix_QextSerialPort
lineType	src/dl_attributes.h	/^    string lineType;$/;"	m	class:DL_Attributes
lineType	src/dl_writer.h	/^    void lineType(const char *lt) const {$/;"	f	class:DL_Writer
lineTypeScale	src/dl_writer.h	/^    void lineTypeScale(double scale) const {$/;"	f	class:DL_Writer
lineWeight	src/dl_writer.h	/^    void lineWeight(int lw) const {$/;"	f	class:DL_Writer
linkImage	src/dl_creationadapter.h	/^	virtual void linkImage(const DL_ImageDefData&) {}$/;"	f	class:DL_CreationAdapter
livescan	message.h	13;"	d
load	mainwindow.h	/^    QPushButton *load;$/;"	m	class:MainWindow
loadFile	mainwindow.cpp	/^    void MainWindow::loadFile()$/;"	f	class:MainWindow
m	src/dl_entities.h	/^    unsigned int m;$/;"	m	struct:DL_PolylineData
m_handle	src/dl_writer.h	/^    mutable unsigned long m_handle;$/;"	m	class:DL_Writer
m_ofile	src/dl_writer_ascii.h	/^    mutable std::ofstream m_ofile;$/;"	m	class:DL_WriterA
magenta	src/dl_codes.h	/^        magenta = 6,$/;"	e	enum:DL_Codes::color
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
maxControlPoints	src/dl_dxf.h	/^    int maxControlPoints;$/;"	m	class:DL_Dxf
maxHatchEdges	src/dl_dxf.h	/^    int* maxHatchEdges;$/;"	m	class:DL_Dxf
maxHatchLoops	src/dl_dxf.h	/^    int maxHatchLoops;$/;"	m	class:DL_Dxf
maxKnots	src/dl_dxf.h	/^    int maxKnots;$/;"	m	class:DL_Dxf
maxLeaderVertices	src/dl_dxf.h	/^    int maxLeaderVertices;$/;"	m	class:DL_Dxf
maxVertices	src/dl_dxf.h	/^    int maxVertices;$/;"	m	class:DL_Dxf
message	message.cpp	/^message::message(quint8 command, QByteArray commarray, quint16 commcrc)$/;"	f	class:message
message	message.h	/^class message$/;"	c
messagearray	message.h	/^    QByteArray messagearray;$/;"	m	class:message
messagehead	message.h	8;"	d
messagelenth	message.h	/^    quint8 messagelenth;$/;"	m	class:message
messagetype	message.h	/^    quint8 messagetype;$/;"	m	class:message
modelSpaceHandle	src/dl_writer.h	/^    mutable unsigned long modelSpaceHandle;$/;"	m	class:DL_Writer
mousePressEvent	dxfview.cpp	/^void DxfView::mousePressEvent(QMouseEvent *event)$/;"	f	class:DxfView
mousePressEvent	hole.cpp	/^void Hole::mousePressEvent(QGraphicsSceneMouseEvent *event)$/;"	f	class:Hole
movex	message.h	7;"	d
movexy	message.h	10;"	d
movey	message.h	9;"	d
mpx	src/dl_entities.h	/^    double mpx;$/;"	m	struct:DL_DimensionData
mpy	src/dl_entities.h	/^    double mpy;$/;"	m	struct:DL_DimensionData
mpz	src/dl_entities.h	/^    double mpz;$/;"	m	struct:DL_DimensionData
mutex	qextserialbase.h	/^	    QMutex* mutex;$/;"	m	class:QextSerialBase
mx	src/dl_entities.h	/^    double mx;$/;"	m	struct:DL_EllipseData
my	src/dl_entities.h	/^    double my;$/;"	m	struct:DL_EllipseData
mz	src/dl_entities.h	/^    double mz;$/;"	m	struct:DL_EllipseData
n	src/dl_entities.h	/^    unsigned int n;$/;"	m	struct:DL_PolylineData
nControl	src/dl_entities.h	/^    unsigned int nControl;$/;"	m	struct:DL_SplineData
nKnots	src/dl_entities.h	/^    unsigned int nKnots;$/;"	m	struct:DL_SplineData
name	src/dl_entities.h	/^    string name;$/;"	m	struct:DL_BlockData
name	src/dl_entities.h	/^    string name;$/;"	m	struct:DL_InsertData
name	src/dl_entities.h	/^    string name;$/;"	m	struct:DL_LayerData
name	src/dl_entities.h	/^    string name;$/;"	m	struct:DL_LineTypeData
nearpointpath	mainwindow.cpp	/^  void MainWindow::nearpointpath()$/;"	f	class:MainWindow
numEdges	src/dl_entities.h	/^    int numEdges;$/;"	m	struct:DL_HatchLoopData
numLoops	src/dl_entities.h	/^    int numLoops;$/;"	m	struct:DL_HatchData
number	src/dl_entities.h	/^    int number;$/;"	m	struct:DL_LeaderData
number	src/dl_entities.h	/^    unsigned int number;$/;"	m	struct:DL_PolylineData
oblique	src/dl_entities.h	/^    double oblique;$/;"	m	struct:DL_DimLinearData
open	posix_qextserialport.cpp	/^bool Posix_QextSerialPort::open(OpenMode mode)$/;"	f	class:Posix_QextSerialPort
openFailed	src/dl_writer_ascii.cpp	/^bool DL_WriterA::openFailed() const {$/;"	f	class:DL_WriterA
openIniFileAct	mainwindow.h	/^    QAction *openIniFileAct;$/;"	m	class:MainWindow
openPropertyListAct	mainwindow.h	/^    QAction *openPropertyListAct;$/;"	m	class:MainWindow
openRegistryPathAct	mainwindow.h	/^    QAction *openRegistryPathAct;$/;"	m	class:MainWindow
openSettingsAct	mainwindow.h	/^    QAction *openSettingsAct;$/;"	m	class:MainWindow
openfile	mainwindow.cpp	/^    void MainWindow::openfile()$/;"	f	class:MainWindow
operator ()	mainwindow.h	/^     bool operator ()(const Hole* pstItem1, const Hole* pstItem2)$/;"	f	class:CompGreaterX
operator ()	mainwindow.h	/^     bool operator ()(const Hole* pstItem1, const Hole* pstItem2)$/;"	f	class:CompGreaterY
operator ()	mainwindow.h	/^     bool operator ()(const Hole* pstItem1, const Hole* pstItem2)$/;"	f	class:CompGreaterYX
operator ()	mainwindow.h	/^     bool operator ()(const Hole* pstItem1, const Hole* pstItem2)$/;"	f	class:CompLessX
operator ()	mainwindow.h	/^     bool operator ()(const Hole* pstItem1, const Hole* pstItem2)$/;"	f	class:CompLessY
operator ()	mainwindow.h	/^     bool operator ()(const Hole* pstItem1, const Hole* pstItem2)$/;"	f	class:CompTwoHole
operator =	posix_qextserialport.cpp	/^Posix_QextSerialPort& Posix_QextSerialPort::operator=(const Posix_QextSerialPort& s)$/;"	f	class:Posix_QextSerialPort
operator =	src/dl_attributes.h	/^    DL_Attributes operator = (const DL_Attributes& attrib) {$/;"	f	class:DL_Attributes
operator =	src/dl_extrusion.h	/^    DL_Extrusion operator = (const DL_Extrusion& extru) {$/;"	f	class:DL_Extrusion
optionsMenu	mainwindow.h	/^    QMenu *optionsMenu;$/;"	m	class:MainWindow
out	src/dl_dxf.cpp	/^DL_WriterA* DL_Dxf::out(const char* file, DL_Codes::version version) {$/;"	f	class:DL_Dxf
pagesWidget	configdialog.h	/^    QStackedWidget *pagesWidget;$/;"	m	class:ConfigDialog
paint	hole.cpp	/^void Hole::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)$/;"	f	class:Hole
paperSpace0Handle	src/dl_writer.h	/^    mutable unsigned long paperSpace0Handle;$/;"	m	class:DL_Writer
paperSpaceHandle	src/dl_writer.h	/^    mutable unsigned long paperSpaceHandle;$/;"	m	class:DL_Writer
parity	qextserialbase.cpp	/^ParityType QextSerialBase::parity() const$/;"	f	class:QextSerialBase
path	mainwindow.h	/^    QString path;$/;"	m	class:MainWindow
pattern	src/dl_entities.h	/^    string pattern;$/;"	m	struct:DL_HatchData
polylineLayer	src/dl_dxf.h	/^	string polylineLayer;$/;"	m	class:DL_Dxf
polylinelist	circleread.h	/^    QList <DL_PolylineData> polylinelist;$/;"	m	class:CIRCLEREAD
port	qextserialbase.h	/^	    QString port;$/;"	m	class:QextSerialBase
portName	qextserialbase.cpp	/^QString QextSerialBase::portName() const$/;"	f	class:QextSerialBase
processCodeValuePair	src/dl_creationadapter.h	/^    virtual void processCodeValuePair(unsigned int, char*) {}$/;"	f	class:DL_CreationAdapter
processDXFGroup	src/dl_dxf.cpp	/^bool DL_Dxf::processDXFGroup(DL_CreationInterface* creationInterface,$/;"	f	class:DL_Dxf
queryMode	qextserialbase.h	/^		inline QextSerialBase::QueryMode queryMode() const { return _queryMode; };$/;"	f	class:QextSerialBase
radius	holeitem.h	/^    double radius;$/;"	m	class:HoleItem
radius	src/dl_entities.h	/^    double radius;$/;"	m	struct:DL_ArcData
radius	src/dl_entities.h	/^    double radius;$/;"	m	struct:DL_CircleData
radius	src/dl_entities.h	/^    double radius;$/;"	m	struct:DL_HatchEdgeData
ratio	src/dl_entities.h	/^    double ratio;$/;"	m	struct:DL_EllipseData
readData	posix_qextserialport.cpp	/^qint64 Posix_QextSerialPort::readData(char * data, qint64 maxSize)$/;"	f	class:Posix_QextSerialPort
readDxfGroups	src/dl_dxf.cpp	/^bool DL_Dxf::readDxfGroups(FILE *fp, DL_CreationInterface* creationInterface,$/;"	f	class:DL_Dxf
readDxfGroups	src/dl_dxf.cpp	/^bool DL_Dxf::readDxfGroups(std::stringstream& stream,$/;"	f	class:DL_Dxf
readLine	qextserialbase.cpp	/^qint64 QextSerialBase::readLine(char * data, qint64 maxSize)$/;"	f	class:QextSerialBase
read_rs	commthread.h	/^      volatile bool read_rs;$/;"	m	class:commThread
readcircle	circleread.cpp	/^void CIRCLEREAD::readcircle(const char *filename)$/;"	f	class:CIRCLEREAD
readcomm	mainwindow.cpp	/^    void MainWindow::readcomm()$/;"	f	class:MainWindow
readstatus	message.h	12;"	d
red	src/dl_codes.h	/^        red = 1,$/;"	e	enum:DL_Codes::color
ref	src/dl_entities.h	/^    string ref;$/;"	m	struct:DL_ImageData
ref	src/dl_entities.h	/^    string ref;$/;"	m	struct:DL_ImageDefData
refreshAct	mainwindow.h	/^    QAction *refreshAct;$/;"	m	class:MainWindow
resetHandle	src/dl_writer.h	/^    void resetHandle() const {$/;"	f	class:DL_Writer
rowSp	src/dl_entities.h	/^    double rowSp;$/;"	m	struct:DL_InsertData
rows	src/dl_entities.h	/^    int rows;$/;"	m	struct:DL_InsertData
run	commthread.cpp	/^void commThread::run()$/;"	f	class:commThread
scale	src/dl_entities.h	/^    double scale;$/;"	m	struct:DL_HatchData
scaleView	dxfview.cpp	/^void DxfView::scaleView(qreal scaleFactor)$/;"	f	class:DxfView
section	src/dl_writer.h	/^    void section(const char* name) const {$/;"	f	class:DL_Writer
sectionBlockEntry	src/dl_writer.h	/^    void sectionBlockEntry(unsigned long int h=0)  const {$/;"	f	class:DL_Writer
sectionBlockEntryEnd	src/dl_writer.h	/^    void sectionBlockEntryEnd(unsigned long int h=0)  const {$/;"	f	class:DL_Writer
sectionBlocks	src/dl_writer.h	/^    void sectionBlocks() const {$/;"	f	class:DL_Writer
sectionClasses	src/dl_writer.h	/^    void sectionClasses() const {$/;"	f	class:DL_Writer
sectionEnd	src/dl_writer.h	/^    void sectionEnd() const {$/;"	f	class:DL_Writer
sectionEntities	src/dl_writer.h	/^    void sectionEntities() const {$/;"	f	class:DL_Writer
sectionHeader	src/dl_writer.h	/^    void sectionHeader() const {$/;"	f	class:DL_Writer
sectionObjects	src/dl_writer.h	/^    void sectionObjects() const {$/;"	f	class:DL_Writer
sectionTables	src/dl_writer.h	/^    void sectionTables() const {$/;"	f	class:DL_Writer
selectGroup	mainwindow.h	/^    QGroupBox *selectGroup;$/;"	m	class:MainWindow
selectitem	mainwindow.cpp	/^    void MainWindow::selectitem(Hole *hole)$/;"	f	class:MainWindow
send	mainwindow.h	/^    QPushButton *send;$/;"	m	class:MainWindow
setAttributes	src/dl_creationinterface.h	/^    void setAttributes(const DL_Attributes& attrib) {$/;"	f	class:DL_CreationInterface
setBaudRate	posix_qextserialport.cpp	/^void Posix_QextSerialPort::setBaudRate(BaudRateType baudRate)$/;"	f	class:Posix_QextSerialPort
setColor	src/dl_attributes.h	/^    void setColor(int color) {$/;"	f	class:DL_Attributes
setColor24	src/dl_attributes.h	/^    void setColor24(int color) {$/;"	f	class:DL_Attributes
setDataBits	posix_qextserialport.cpp	/^void Posix_QextSerialPort::setDataBits(DataBitsType dataBits)$/;"	f	class:Posix_QextSerialPort
setDirection	src/dl_extrusion.h	/^    void setDirection(double dx, double dy, double dz) {$/;"	f	class:DL_Extrusion
setDtr	posix_qextserialport.cpp	/^void Posix_QextSerialPort::setDtr(bool set)$/;"	f	class:Posix_QextSerialPort
setElevation	src/dl_extrusion.h	/^    void setElevation(double elevation) {$/;"	f	class:DL_Extrusion
setExtrusion	src/dl_creationinterface.h	/^    void setExtrusion(double dx, double dy, double dz, double elevation) {$/;"	f	class:DL_CreationInterface
setFlowControl	posix_qextserialport.cpp	/^void Posix_QextSerialPort::setFlowControl(FlowType flow)$/;"	f	class:Posix_QextSerialPort
setLayer	src/dl_attributes.h	/^    void setLayer(const string& layer) {$/;"	f	class:DL_Attributes
setLineType	src/dl_attributes.h	/^    void setLineType(const string& lineType) {$/;"	f	class:DL_Attributes
setModelSpaceHandle	src/dl_writer.h	/^    void setModelSpaceHandle(unsigned long h) {$/;"	f	class:DL_Writer
setPaperSpace0Handle	src/dl_writer.h	/^    void setPaperSpace0Handle(unsigned long h) {$/;"	f	class:DL_Writer
setPaperSpaceHandle	src/dl_writer.h	/^    void setPaperSpaceHandle(unsigned long h) {$/;"	f	class:DL_Writer
setParity	posix_qextserialport.cpp	/^void Posix_QextSerialPort::setParity(ParityType parity)$/;"	f	class:Posix_QextSerialPort
setPortName	qextserialbase.cpp	/^void QextSerialBase::setPortName(const QString & name)$/;"	f	class:QextSerialBase
setQueryMode	qextserialbase.cpp	/^void QextSerialBase::setQueryMode(QueryMode mechanism)$/;"	f	class:QextSerialBase
setRts	posix_qextserialport.cpp	/^void Posix_QextSerialPort::setRts(bool set)$/;"	f	class:Posix_QextSerialPort
setStopBits	posix_qextserialport.cpp	/^void Posix_QextSerialPort::setStopBits(StopBitsType stopBits)$/;"	f	class:Posix_QextSerialPort
setTimeout	posix_qextserialport.cpp	/^void Posix_QextSerialPort::setTimeout(long millisec)$/;"	f	class:Posix_QextSerialPort
setVariableDouble	src/dl_creationadapter.h	/^    virtual void setVariableDouble(const char*, double, int) {}$/;"	f	class:DL_CreationAdapter
setVariableInt	src/dl_creationadapter.h	/^    virtual void setVariableInt(const char*, int, int) {}$/;"	f	class:DL_CreationAdapter
setVariableString	src/dl_creationadapter.h	/^    virtual void setVariableString(const char*, const char*, int) {}$/;"	f	class:DL_CreationAdapter
setVariableVector	src/dl_creationadapter.h	/^    virtual void setVariableVector(const char*, $/;"	f	class:DL_CreationAdapter
setWidth	src/dl_attributes.h	/^    void setWidth(int width) {$/;"	f	class:DL_Attributes
settingKey	src/dl_dxf.h	/^    char settingKey[DL_DXF_MAXLINE+1];$/;"	m	class:DL_Dxf
settingValue	src/dl_dxf.h	/^    char settingValue[DL_DXF_MAXLINE+1];$/;"	m	class:DL_Dxf
setupMatrix	mainwindow.cpp	/^    void MainWindow::setupMatrix()$/;"	f	class:MainWindow
simulater	mainwindow.cpp	/^    void MainWindow::simulater()$/;"	f	class:MainWindow
simulation	mainwindow.h	/^    QPushButton *simulation;$/;"	m	class:MainWindow
size	posix_qextserialport.cpp	/^qint64 Posix_QextSerialPort::size() const$/;"	f	class:Posix_QextSerialPort
solid	src/dl_entities.h	/^    bool solid;$/;"	m	struct:DL_HatchData
splitterMain	mainwindow.h	/^    QSplitter *splitterMain;$/;"	m	class:MainWindow
splitterRight	mainwindow.h	/^    QSplitter *splitterRight;$/;"	m	class:MainWindow
stopBits	qextserialbase.cpp	/^StopBitsType QextSerialBase::stopBits() const$/;"	f	class:QextSerialBase
stopped	commthread.h	/^      volatile bool stopped;$/;"	m	class:commThread
strReplace	src/dl_writer_ascii.cpp	/^void DL_WriterA::strReplace(char* str, char src, char dest) {$/;"	f	class:DL_WriterA
strcasecmp	src/dl_codes.h	38;"	d
strcasecmp	src/dl_codes.h	42;"	d
strcasecmp	src/dl_dxf.cpp	40;"	d	file:
strcasecmp	src/dl_writer.h	36;"	d
stringToInt	src/dl_dxf.cpp	/^int DL_Dxf::stringToInt(const char* s, bool* ok) {$/;"	f	class:DL_Dxf
stripWhiteSpace	src/dl_dxf.cpp	/^bool DL_Dxf::stripWhiteSpace(char** s) {$/;"	f	class:DL_Dxf
style	src/dl_entities.h	/^    string style;$/;"	m	struct:DL_DimensionData
style	src/dl_entities.h	/^    string style;$/;"	m	struct:DL_MTextData
style	src/dl_entities.h	/^    string style;$/;"	m	struct:DL_TextData
styleHandleStd	src/dl_dxf.h	/^    unsigned long styleHandleStd;$/;"	m	class:DL_Dxf
subClass	src/dl_writer.h	/^    void subClass(const char* sub) const {$/;"	f	class:DL_Writer
sx	src/dl_entities.h	/^    double sx;$/;"	m	struct:DL_InsertData
sy	src/dl_entities.h	/^    double sy;$/;"	m	struct:DL_InsertData
sz	src/dl_entities.h	/^    double sz;$/;"	m	struct:DL_InsertData
table	src/dl_writer.h	/^    void table(const char* name, int num, int handle) const {$/;"	f	class:DL_Writer
tableAppid	src/dl_writer.h	/^    void tableAppid(int num) const {$/;"	f	class:DL_Writer
tableAppidEntry	src/dl_writer.h	/^    void tableAppidEntry(unsigned long int h=0)  const {$/;"	f	class:DL_Writer
tableEnd	src/dl_writer.h	/^    void tableEnd() const {$/;"	f	class:DL_Writer
tableLayerEntry	src/dl_writer.h	/^    void tableLayerEntry(unsigned long int h=0)  const {$/;"	f	class:DL_Writer
tableLayers	src/dl_writer.h	/^    void tableLayers(int num) const {$/;"	f	class:DL_Writer
tableLineTypeEntry	src/dl_writer.h	/^    void tableLineTypeEntry(unsigned long int h=0)  const {$/;"	f	class:DL_Writer
tableLineTypes	src/dl_writer.h	/^    void tableLineTypes(int num) const {$/;"	f	class:DL_Writer
test	src/dl_dxf.cpp	/^void DL_Dxf::test() {$/;"	f	class:DL_Dxf
text	src/dl_entities.h	/^    string text;$/;"	m	struct:DL_DimensionData
text	src/dl_entities.h	/^    string text;$/;"	m	struct:DL_MTextData
text	src/dl_entities.h	/^    string text;$/;"	m	struct:DL_TextData
textAnnotationHeight	src/dl_entities.h	/^    double textAnnotationHeight;$/;"	m	struct:DL_LeaderData
textAnnotationWidth	src/dl_entities.h	/^    double textAnnotationWidth;$/;"	m	struct:DL_LeaderData
textBottom	mainwindow.h	/^    QPlainTextEdit *textBottom;$/;"	m	class:MainWindow
textGenerationFlags	src/dl_entities.h	/^    int textGenerationFlags;$/;"	m	struct:DL_TextData
textTop	mainwindow.h	/^    QPlainTextEdit  *textTop;$/;"	m	class:MainWindow
thickness	src/dl_entities.h	/^    double thickness;$/;"	m	struct:DL_TraceData
time	mainwindow.h	/^    QTimer *time ;$/;"	m	class:MainWindow
toInt	src/dl_dxf.h	/^    static int toInt(const char* value, int def=0) {$/;"	f	class:DL_Dxf
toReal	src/dl_dxf.h	/^    static double toReal(const char* value, double def=0.0) {$/;"	f	class:DL_Dxf
toString	src/dl_dxf.h	/^    static const char* toString(const char* value, const char* def="") {$/;"	f	class:DL_Dxf
translateError	posix_qextserialport.cpp	/^void Posix_QextSerialPort::translateError(ulong error)$/;"	f	class:Posix_QextSerialPort
type	hole.h	/^    int type() const { return Type; }$/;"	f	class:Hole
type	src/dl_entities.h	/^    int type;$/;"	m	struct:DL_DimensionData
type	src/dl_entities.h	/^    int type;$/;"	m	struct:DL_HatchEdgeData
ungetChar	posix_qextserialport.cpp	/^void Posix_QextSerialPort::ungetChar(char)$/;"	f	class:Posix_QextSerialPort
ux	src/dl_entities.h	/^	double ux;$/;"	m	struct:DL_ImageData
uy	src/dl_entities.h	/^	double uy;$/;"	m	struct:DL_ImageData
uz	src/dl_entities.h	/^	double uz;$/;"	m	struct:DL_ImageData
vJustification	src/dl_entities.h	/^    int vJustification;$/;"	m	struct:DL_TextData
values	src/dl_dxf.h	/^    char values[DL_DXF_MAXGROUPCODE][DL_DXF_MAXLINE+1];$/;"	m	class:DL_Dxf
version	src/dl_codes.h	/^    enum version {$/;"	g	class:DL_Codes
version	src/dl_dxf.h	/^    DL_Codes::version version;$/;"	m	class:DL_Dxf
version	src/dl_writer.h	/^    DL_Codes::version version;$/;"	m	class:DL_Writer
vertexIndex	src/dl_dxf.h	/^    int vertexIndex;$/;"	m	class:DL_Dxf
vertexlist	circleread.h	/^    QList <DL_VertexData> vertexlist;$/;"	m	class:CIRCLEREAD
vertices	src/dl_dxf.h	/^    double* vertices;$/;"	m	class:DL_Dxf
vx	src/dl_entities.h	/^	double vx;$/;"	m	struct:DL_ImageData
vy	src/dl_entities.h	/^	double vy;$/;"	m	struct:DL_ImageData
vz	src/dl_entities.h	/^	double vz;$/;"	m	struct:DL_ImageData
wheelEvent	dxfview.cpp	/^void DxfView::wheelEvent(QWheelEvent *event)$/;"	f	class:DxfView
white	src/dl_codes.h	/^        white = 7,$/;"	e	enum:DL_Codes::color
width	src/dl_attributes.h	/^    int width;$/;"	m	class:DL_Attributes
width	src/dl_entities.h	/^	int width;$/;"	m	struct:DL_ImageData
width	src/dl_entities.h	/^    double width;$/;"	m	struct:DL_MTextData
wirtecomm	mainwindow.cpp	/^  void MainWindow::wirtecomm()$/;"	f	class:MainWindow
write3dFace	src/dl_dxf.cpp	/^void DL_Dxf::write3dFace(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeAppid	src/dl_dxf.cpp	/^void DL_Dxf::writeAppid(DL_WriterA& dw, const string& name) {$/;"	f	class:DL_Dxf
writeArc	src/dl_dxf.cpp	/^void DL_Dxf::writeArc(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeBlock	src/dl_dxf.cpp	/^void DL_Dxf::writeBlock(DL_WriterA& dw, const DL_BlockData& data) {$/;"	f	class:DL_Dxf
writeBlockRecord	src/dl_dxf.cpp	/^void DL_Dxf::writeBlockRecord(DL_WriterA& dw) {$/;"	f	class:DL_Dxf
writeBlockRecord	src/dl_dxf.cpp	/^void DL_Dxf::writeBlockRecord(DL_WriterA& dw, const string& name) {$/;"	f	class:DL_Dxf
writeCircle	src/dl_dxf.cpp	/^void DL_Dxf::writeCircle(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeComment	src/dl_dxf.cpp	/^void DL_Dxf::writeComment(DL_WriterA& dw, const string& comment) {$/;"	f	class:DL_Dxf
writeControlPoint	src/dl_dxf.cpp	/^void DL_Dxf::writeControlPoint(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeData	posix_qextserialport.cpp	/^qint64 Posix_QextSerialPort::writeData(const char * data, qint64 maxSize)$/;"	f	class:Posix_QextSerialPort
writeDimAligned	src/dl_dxf.cpp	/^void DL_Dxf::writeDimAligned(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeDimAngular	src/dl_dxf.cpp	/^void DL_Dxf::writeDimAngular(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeDimAngular3P	src/dl_dxf.cpp	/^void DL_Dxf::writeDimAngular3P(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeDimDiametric	src/dl_dxf.cpp	/^void DL_Dxf::writeDimDiametric(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeDimLinear	src/dl_dxf.cpp	/^void DL_Dxf::writeDimLinear(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeDimOrdinate	src/dl_dxf.cpp	/^void DL_Dxf::writeDimOrdinate(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeDimRadial	src/dl_dxf.cpp	/^void DL_Dxf::writeDimRadial(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeDimStyle	src/dl_dxf.cpp	/^void DL_Dxf::writeDimStyle(DL_WriterA& dw, $/;"	f	class:DL_Dxf
writeEllipse	src/dl_dxf.cpp	/^void DL_Dxf::writeEllipse(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeEndBlock	src/dl_dxf.cpp	/^void DL_Dxf::writeEndBlock(DL_WriterA& dw, const string& name) {$/;"	f	class:DL_Dxf
writeHatch1	src/dl_dxf.cpp	/^void DL_Dxf::writeHatch1(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeHatch2	src/dl_dxf.cpp	/^void DL_Dxf::writeHatch2(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeHatchEdge	src/dl_dxf.cpp	/^void DL_Dxf::writeHatchEdge(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeHatchLoop1	src/dl_dxf.cpp	/^void DL_Dxf::writeHatchLoop1(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeHatchLoop2	src/dl_dxf.cpp	/^void DL_Dxf::writeHatchLoop2(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeHeader	src/dl_dxf.cpp	/^void DL_Dxf::writeHeader(DL_WriterA& dw) {$/;"	f	class:DL_Dxf
writeImage	src/dl_dxf.cpp	/^int DL_Dxf::writeImage(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeImageDef	src/dl_dxf.cpp	/^void DL_Dxf::writeImageDef(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeInsert	src/dl_dxf.cpp	/^void DL_Dxf::writeInsert(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeKnot	src/dl_dxf.cpp	/^void DL_Dxf::writeKnot(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeLayer	src/dl_dxf.cpp	/^void DL_Dxf::writeLayer(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeLeader	src/dl_dxf.cpp	/^void DL_Dxf::writeLeader(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeLeaderVertex	src/dl_dxf.cpp	/^void DL_Dxf::writeLeaderVertex(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeLine	src/dl_dxf.cpp	/^void DL_Dxf::writeLine(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeLineType	src/dl_dxf.cpp	/^void DL_Dxf::writeLineType(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeMText	src/dl_dxf.cpp	/^void DL_Dxf::writeMText(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeObjects	src/dl_dxf.cpp	/^void DL_Dxf::writeObjects(DL_WriterA& dw) {$/;"	f	class:DL_Dxf
writeObjectsEnd	src/dl_dxf.cpp	/^void DL_Dxf::writeObjectsEnd(DL_WriterA& dw) {$/;"	f	class:DL_Dxf
writePoint	src/dl_dxf.cpp	/^void DL_Dxf::writePoint(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writePolyline	src/dl_dxf.cpp	/^void DL_Dxf::writePolyline(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writePolylineEnd	src/dl_dxf.cpp	/^void DL_Dxf::writePolylineEnd(DL_WriterA& dw) {$/;"	f	class:DL_Dxf
writeSolid	src/dl_dxf.cpp	/^void DL_Dxf::writeSolid(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeSpline	src/dl_dxf.cpp	/^void DL_Dxf::writeSpline(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeStyle	src/dl_dxf.cpp	/^void DL_Dxf::writeStyle(DL_WriterA& dw) {$/;"	f	class:DL_Dxf
writeText	src/dl_dxf.cpp	/^void DL_Dxf::writeText(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeUcs	src/dl_dxf.cpp	/^void DL_Dxf::writeUcs(DL_WriterA& dw) {$/;"	f	class:DL_Dxf
writeVPort	src/dl_dxf.cpp	/^void DL_Dxf::writeVPort(DL_WriterA& dw) {$/;"	f	class:DL_Dxf
writeVertex	src/dl_dxf.cpp	/^void DL_Dxf::writeVertex(DL_WriterA& dw,$/;"	f	class:DL_Dxf
writeView	src/dl_dxf.cpp	/^void DL_Dxf::writeView(DL_WriterA& dw) {$/;"	f	class:DL_Dxf
write_rs	commthread.h	/^      volatile bool write_rs;$/;"	m	class:commThread
x	src/dl_entities.h	/^    double x;$/;"	m	struct:DL_ControlPointData
x	src/dl_entities.h	/^    double x;$/;"	m	struct:DL_LeaderVertexData
x	src/dl_entities.h	/^    double x;$/;"	m	struct:DL_PointData
x	src/dl_entities.h	/^    double x;$/;"	m	struct:DL_VertexData
x	src/dl_entities.h	/^    double x[4];$/;"	m	struct:DL_TraceData
x1	src/dl_entities.h	/^    double x1;$/;"	m	struct:DL_HatchEdgeData
x1	src/dl_entities.h	/^    double x1;$/;"	m	struct:DL_LineData
x2	src/dl_entities.h	/^    double x2;$/;"	m	struct:DL_HatchEdgeData
x2	src/dl_entities.h	/^    double x2;$/;"	m	struct:DL_LineData
xScaleFactor	src/dl_entities.h	/^    double xScaleFactor;$/;"	m	struct:DL_TextData
xtype	src/dl_entities.h	/^    bool xtype;$/;"	m	struct:DL_DimOrdinateData
y	src/dl_entities.h	/^    double y;$/;"	m	struct:DL_ControlPointData
y	src/dl_entities.h	/^    double y;$/;"	m	struct:DL_LeaderVertexData
y	src/dl_entities.h	/^    double y;$/;"	m	struct:DL_PointData
y	src/dl_entities.h	/^    double y;$/;"	m	struct:DL_VertexData
y	src/dl_entities.h	/^    double y[4];$/;"	m	struct:DL_TraceData
y1	src/dl_entities.h	/^    double y1;$/;"	m	struct:DL_HatchEdgeData
y1	src/dl_entities.h	/^    double y1;$/;"	m	struct:DL_LineData
y2	src/dl_entities.h	/^    double y2;$/;"	m	struct:DL_HatchEdgeData
y2	src/dl_entities.h	/^    double y2;$/;"	m	struct:DL_LineData
yellow	src/dl_codes.h	/^        yellow = 2,$/;"	e	enum:DL_Codes::color
z	src/dl_entities.h	/^    double z;$/;"	m	struct:DL_ControlPointData
z	src/dl_entities.h	/^    double z;$/;"	m	struct:DL_LeaderVertexData
z	src/dl_entities.h	/^    double z;$/;"	m	struct:DL_PointData
z	src/dl_entities.h	/^    double z;$/;"	m	struct:DL_VertexData
z	src/dl_entities.h	/^    double z[4];$/;"	m	struct:DL_TraceData
z1	src/dl_entities.h	/^    double z1;$/;"	m	struct:DL_LineData
z2	src/dl_entities.h	/^    double z2;$/;"	m	struct:DL_LineData
zhengjiaoType	mainwindow.h	/^    QRadioButton *zhengjiaoType;$/;"	m	class:MainWindow
zhengjiaosort	mainwindow.cpp	/^  void    MainWindow::zhengjiaosort( )$/;"	f	class:MainWindow
zidingyiType	mainwindow.h	/^    QRadioButton *zidingyiType ;$/;"	m	class:MainWindow
zoomIn	mainwindow.cpp	/^  void MainWindow::zoomIn()$/;"	f	class:MainWindow
zoomInIcon	mainwindow.h	/^    QToolButton *zoomInIcon;$/;"	m	class:MainWindow
zoomOut	mainwindow.cpp	/^    void MainWindow::zoomOut()$/;"	f	class:MainWindow
zoomOutIcon	mainwindow.h	/^    QToolButton *zoomOutIcon;$/;"	m	class:MainWindow
zoomSlider	mainwindow.h	/^   QSlider *zoomSlider;$/;"	m	class:MainWindow
zoomwidget	mainwindow.h	/^    QWidget *zoomwidget;$/;"	m	class:MainWindow
zuijinType	mainwindow.h	/^    QRadioButton *zuijinType ;$/;"	m	class:MainWindow
~DL_CreationAdapter	src/dl_creationadapter.h	/^    virtual ~DL_CreationAdapter() {}$/;"	f	class:DL_CreationAdapter
~DL_CreationInterface	src/dl_creationinterface.h	/^    virtual ~DL_CreationInterface() {$/;"	f	class:DL_CreationInterface
~DL_Dxf	src/dl_dxf.cpp	/^DL_Dxf::~DL_Dxf() {$/;"	f	class:DL_Dxf
~DL_Extrusion	src/dl_extrusion.h	/^	~DL_Extrusion() {$/;"	f	class:DL_Extrusion
~DL_Writer	src/dl_writer.h	/^    virtual ~DL_Writer() {}$/;"	f	class:DL_Writer
~DL_WriterA	src/dl_writer_ascii.h	/^    virtual ~DL_WriterA() {}$/;"	f	class:DL_WriterA
~MainWindow	mainwindow.cpp	/^    MainWindow::~MainWindow()$/;"	f	class:MainWindow
~Posix_QextSerialPort	posix_qextserialport.cpp	/^Posix_QextSerialPort::~Posix_QextSerialPort()$/;"	f	class:Posix_QextSerialPort
~QextSerialBase	qextserialbase.cpp	/^QextSerialBase::~QextSerialBase()$/;"	f	class:QextSerialBase
